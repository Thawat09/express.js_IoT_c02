{"version":3,"file":"index.js","sources":["../node_modules/diff-dom/src/diffDOM/dom/fromVirtual.js","../node_modules/diff-dom/src/diffDOM/dom/apply.js","../node_modules/diff-dom/src/diffDOM/dom/undo.js","../node_modules/diff-dom/src/diffDOM/virtual/helpers.js","../node_modules/diff-dom/src/diffDOM/virtual/apply.js","../node_modules/diff-dom/src/diffDOM/virtual/fromDOM.js","../node_modules/diff-dom/src/diffDOM/virtual/fromString.js","../node_modules/diff-dom/src/diffDOM/virtual/diff.js","../node_modules/diff-dom/src/diffDOM/index.js","../node_modules/dayjs/dayjs.min.js","../node_modules/dayjs/plugin/customParseFormat.js"],"sourcesContent":["export function objToNode(objNode, insideSvg, options) {\n    let node\n    if (objNode.nodeName === \"#text\") {\n        node = options.document.createTextNode(objNode.data)\n    } else if (objNode.nodeName === \"#comment\") {\n        node = options.document.createComment(objNode.data)\n    } else {\n        if (insideSvg) {\n            node = options.document.createElementNS(\n                \"http://www.w3.org/2000/svg\",\n                objNode.nodeName\n            )\n        } else if (objNode.nodeName.toLowerCase() === \"svg\") {\n            node = options.document.createElementNS(\n                \"http://www.w3.org/2000/svg\",\n                \"svg\"\n            )\n            insideSvg = true\n        } else {\n            node = options.document.createElement(objNode.nodeName)\n        }\n        if (objNode.attributes) {\n            Object.entries(objNode.attributes).forEach(([key, value]) =>\n                node.setAttribute(key, value)\n            )\n        }\n        if (objNode.childNodes) {\n            objNode.childNodes.forEach((childNode) =>\n                node.appendChild(objToNode(childNode, insideSvg, options))\n            )\n        }\n        if (options.valueDiffing) {\n            if (objNode.value) {\n                node.value = objNode.value\n            }\n            if (objNode.checked) {\n                node.checked = objNode.checked\n            }\n            if (objNode.selected) {\n                node.selected = objNode.selected\n            }\n        }\n    }\n    return node\n}\n","import { objToNode } from \"./fromVirtual\"\n\n// ===== Apply a diff =====\n\nfunction getFromRoute(node, route) {\n    route = route.slice()\n    while (route.length > 0) {\n        if (!node.childNodes) {\n            return false\n        }\n        const c = route.splice(0, 1)[0]\n        node = node.childNodes[c]\n    }\n    return node\n}\n\nexport function applyDiff(\n    tree,\n    diff,\n    options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n) {\n    let node = getFromRoute(tree, diff[options._const.route])\n    let newNode\n    let reference\n    let route\n    let nodeArray\n    let c\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node,\n    }\n\n    if (options.preDiffApply(info)) {\n        return true\n    }\n\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            if (!node || !node.setAttribute) {\n                return false\n            }\n            node.setAttribute(\n                diff[options._const.name],\n                diff[options._const.value]\n            )\n            break\n        case options._const.modifyAttribute:\n            if (!node || !node.setAttribute) {\n                return false\n            }\n            node.setAttribute(\n                diff[options._const.name],\n                diff[options._const.newValue]\n            )\n            if (\n                node.nodeName === \"INPUT\" &&\n                diff[options._const.name] === \"value\"\n            ) {\n                node.value = diff[options._const.newValue]\n            }\n            break\n        case options._const.removeAttribute:\n            if (!node || !node.removeAttribute) {\n                return false\n            }\n            node.removeAttribute(diff[options._const.name])\n            break\n        case options._const.modifyTextElement:\n            if (!node || node.nodeType !== 3) {\n                return false\n            }\n            options.textDiff(\n                node,\n                node.data,\n                diff[options._const.oldValue],\n                diff[options._const.newValue]\n            )\n            break\n        case options._const.modifyValue:\n            if (!node || typeof node.value === \"undefined\") {\n                return false\n            }\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            if (!node || typeof node.data === \"undefined\") {\n                return false\n            }\n            options.textDiff(\n                node,\n                node.data,\n                diff[options._const.oldValue],\n                diff[options._const.newValue]\n            )\n            break\n        case options._const.modifyChecked:\n            if (!node || typeof node.checked === \"undefined\") {\n                return false\n            }\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            if (!node || typeof node.selected === \"undefined\") {\n                return false\n            }\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            node.parentNode.replaceChild(\n                objToNode(\n                    diff[options._const.newValue],\n                    diff[options._const.newValue].nodeName.toLowerCase() ===\n                        \"svg\",\n                    options\n                ),\n                node\n            )\n            break\n        case options._const.relocateGroup:\n            nodeArray = Array(...new Array(diff.groupLength)).map(() =>\n                node.removeChild(node.childNodes[diff[options._const.from]])\n            )\n            nodeArray.forEach((childNode, index) => {\n                if (index === 0) {\n                    reference = node.childNodes[diff[options._const.to]]\n                }\n                node.insertBefore(childNode, reference || null)\n            })\n            break\n        case options._const.removeElement:\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            node = getFromRoute(tree, route)\n            node.insertBefore(\n                objToNode(\n                    diff[options._const.element],\n                    node.namespaceURI === \"http://www.w3.org/2000/svg\",\n                    options\n                ),\n                node.childNodes[c] || null\n            )\n            break\n        case options._const.removeTextElement:\n            if (!node || node.nodeType !== 3) {\n                return false\n            }\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addTextElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            newNode = options.document.createTextNode(\n                diff[options._const.value]\n            )\n            node = getFromRoute(tree, route)\n            if (!node || !node.childNodes) {\n                return false\n            }\n            node.insertBefore(newNode, node.childNodes[c] || null)\n            break\n        default:\n            console.log(\"unknown action\")\n    }\n\n    // if a new node was created, we might be interested in its\n    // post diff hook\n    info.newNode = newNode\n    options.postDiffApply(info)\n\n    return true\n}\n\nexport function applyDOM(tree, diffs, options) {\n    return diffs.every((diff) => applyDiff(tree, diff, options))\n}\n","import { applyDiff } from \"./apply\"\n\n// ===== Undo a diff =====\n\nfunction swap(obj, p1, p2) {\n    const tmp = obj[p1]\n    obj[p1] = obj[p2]\n    obj[p2] = tmp\n}\n\nfunction undoDiff(\n    tree,\n    diff,\n    options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n) {\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            diff[options._const.action] = options._const.removeAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyAttribute:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeAttribute:\n            diff[options._const.action] = options._const.addAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyTextElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyValue:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyComment:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyChecked:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifySelected:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.replaceElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.relocateGroup:\n            swap(diff, options._const.from, options._const.to)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeElement:\n            diff[options._const.action] = options._const.addElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addElement:\n            diff[options._const.action] = options._const.removeElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeTextElement:\n            diff[options._const.action] = options._const.addTextElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addTextElement:\n            diff[options._const.action] = options._const.removeTextElement\n            applyDiff(tree, diff, options)\n            break\n        default:\n            console.log(\"unknown action\")\n    }\n}\n\nexport function undoDOM(tree, diffs, options) {\n    if (!diffs.length) {\n        diffs = [diffs]\n    }\n    diffs = diffs.slice()\n    diffs.reverse()\n    diffs.forEach((diff) => {\n        undoDiff(tree, diff, options)\n    })\n}\n","export class Diff {\n    constructor(options = {}) {\n        Object.entries(options).forEach(([key, value]) => (this[key] = value))\n    }\n\n    toString() {\n        return JSON.stringify(this)\n    }\n\n    setValue(aKey, aValue) {\n        this[aKey] = aValue\n        return this\n    }\n}\n\nfunction elementDescriptors(el) {\n    const output = []\n    output.push(el.nodeName)\n    if (el.nodeName !== \"#text\" && el.nodeName !== \"#comment\") {\n        if (el.attributes) {\n            if (el.attributes[\"class\"]) {\n                output.push(\n                    `${el.nodeName}.${el.attributes[\"class\"].replace(\n                        / /g,\n                        \".\"\n                    )}`\n                )\n            }\n            if (el.attributes.id) {\n                output.push(`${el.nodeName}#${el.attributes.id}`)\n            }\n        }\n    }\n    return output\n}\n\nfunction findUniqueDescriptors(li) {\n    const uniqueDescriptors = {}\n    const duplicateDescriptors = {}\n\n    li.forEach((node) => {\n        elementDescriptors(node).forEach((descriptor) => {\n            const inUnique = descriptor in uniqueDescriptors\n            const inDupes = descriptor in duplicateDescriptors\n            if (!inUnique && !inDupes) {\n                uniqueDescriptors[descriptor] = true\n            } else if (inUnique) {\n                delete uniqueDescriptors[descriptor]\n                duplicateDescriptors[descriptor] = true\n            }\n        })\n    })\n\n    return uniqueDescriptors\n}\n\nfunction uniqueInBoth(l1, l2) {\n    const l1Unique = findUniqueDescriptors(l1)\n    const l2Unique = findUniqueDescriptors(l2)\n    const inBoth = {}\n\n    Object.keys(l1Unique).forEach((key) => {\n        if (l2Unique[key]) {\n            inBoth[key] = true\n        }\n    })\n\n    return inBoth\n}\n\nexport function removeDone(tree) {\n    delete tree.outerDone\n    delete tree.innerDone\n    delete tree.valueDone\n    if (tree.childNodes) {\n        return tree.childNodes.every(removeDone)\n    } else {\n        return true\n    }\n}\n\nexport function isEqual(e1, e2) {\n    if (\n        ![\"nodeName\", \"value\", \"checked\", \"selected\", \"data\"].every(\n            (element) => {\n                if (e1[element] !== e2[element]) {\n                    return false\n                }\n                return true\n            }\n        )\n    ) {\n        return false\n    }\n\n    if (Boolean(e1.attributes) !== Boolean(e2.attributes)) {\n        return false\n    }\n\n    if (Boolean(e1.childNodes) !== Boolean(e2.childNodes)) {\n        return false\n    }\n    if (e1.attributes) {\n        const e1Attributes = Object.keys(e1.attributes)\n        const e2Attributes = Object.keys(e2.attributes)\n\n        if (e1Attributes.length !== e2Attributes.length) {\n            return false\n        }\n        if (\n            !e1Attributes.every((attribute) => {\n                if (e1.attributes[attribute] !== e2.attributes[attribute]) {\n                    return false\n                }\n                return true\n            })\n        ) {\n            return false\n        }\n    }\n    if (e1.childNodes) {\n        if (e1.childNodes.length !== e2.childNodes.length) {\n            return false\n        }\n        if (\n            !e1.childNodes.every((childNode, index) =>\n                isEqual(childNode, e2.childNodes[index])\n            )\n        ) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport function roughlyEqual(\n    e1,\n    e2,\n    uniqueDescriptors,\n    sameSiblings,\n    preventRecursion\n) {\n    if (!e1 || !e2) {\n        return false\n    }\n\n    if (e1.nodeName !== e2.nodeName) {\n        return false\n    }\n\n    if (e1.nodeName === \"#text\") {\n        // Note that we initially don't care what the text content of a node is,\n        // the mere fact that it's the same tag and \"has text\" means it's roughly\n        // equal, and then we can find out the true text difference later.\n        return preventRecursion ? true : e1.data === e2.data\n    }\n\n    if (e1.nodeName in uniqueDescriptors) {\n        return true\n    }\n\n    if (e1.attributes && e2.attributes) {\n        if (e1.attributes.id) {\n            if (e1.attributes.id !== e2.attributes.id) {\n                return false\n            } else {\n                const idDescriptor = `${e1.nodeName}#${e1.attributes.id}`\n                if (idDescriptor in uniqueDescriptors) {\n                    return true\n                }\n            }\n        }\n        if (\n            e1.attributes[\"class\"] &&\n            e1.attributes[\"class\"] === e2.attributes[\"class\"]\n        ) {\n            const classDescriptor = `${e1.nodeName}.${e1.attributes[\n                \"class\"\n            ].replace(/ /g, \".\")}`\n            if (classDescriptor in uniqueDescriptors) {\n                return true\n            }\n        }\n    }\n\n    if (sameSiblings) {\n        return true\n    }\n\n    const nodeList1 = e1.childNodes ? e1.childNodes.slice().reverse() : []\n    const nodeList2 = e2.childNodes ? e2.childNodes.slice().reverse() : []\n\n    if (nodeList1.length !== nodeList2.length) {\n        return false\n    }\n\n    if (preventRecursion) {\n        return nodeList1.every(\n            (element, index) => element.nodeName === nodeList2[index].nodeName\n        )\n    } else {\n        // note: we only allow one level of recursion at any depth. If 'preventRecursion'\n        // was not set, we must explicitly force it to true for child iterations.\n        const childUniqueDescriptors = uniqueInBoth(nodeList1, nodeList2)\n        return nodeList1.every((element, index) =>\n            roughlyEqual(\n                element,\n                nodeList2[index],\n                childUniqueDescriptors,\n                true,\n                true\n            )\n        )\n    }\n}\n\nexport function cloneObj(obj) {\n    //  TODO: Do we really need to clone here? Is it not enough to just return the original object?\n    return JSON.parse(JSON.stringify(obj))\n}\n/**\n * based on https://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Longest_common_substring#JavaScript\n */\nfunction findCommonSubsets(c1, c2, marked1, marked2) {\n    let lcsSize = 0\n    let index = []\n    const c1Length = c1.length\n    const c2Length = c2.length\n\n    const // set up the matching table\n        matches = Array(...new Array(c1Length + 1)).map(() => [])\n\n    const uniqueDescriptors = uniqueInBoth(c1, c2)\n\n    let // If all of the elements are the same tag, id and class, then we can\n        // consider them roughly the same even if they have a different number of\n        // children. This will reduce removing and re-adding similar elements.\n        subsetsSame = c1Length === c2Length\n\n    if (subsetsSame) {\n        c1.some((element, i) => {\n            const c1Desc = elementDescriptors(element)\n            const c2Desc = elementDescriptors(c2[i])\n            if (c1Desc.length !== c2Desc.length) {\n                subsetsSame = false\n                return true\n            }\n            c1Desc.some((description, i) => {\n                if (description !== c2Desc[i]) {\n                    subsetsSame = false\n                    return true\n                }\n            })\n            if (!subsetsSame) {\n                return true\n            }\n        })\n    }\n\n    // fill the matches with distance values\n    for (let c1Index = 0; c1Index < c1Length; c1Index++) {\n        const c1Element = c1[c1Index]\n        for (let c2Index = 0; c2Index < c2Length; c2Index++) {\n            const c2Element = c2[c2Index]\n            if (\n                !marked1[c1Index] &&\n                !marked2[c2Index] &&\n                roughlyEqual(\n                    c1Element,\n                    c2Element,\n                    uniqueDescriptors,\n                    subsetsSame\n                )\n            ) {\n                matches[c1Index + 1][c2Index + 1] = matches[c1Index][c2Index]\n                    ? matches[c1Index][c2Index] + 1\n                    : 1\n                if (matches[c1Index + 1][c2Index + 1] >= lcsSize) {\n                    lcsSize = matches[c1Index + 1][c2Index + 1]\n                    index = [c1Index + 1, c2Index + 1]\n                }\n            } else {\n                matches[c1Index + 1][c2Index + 1] = 0\n            }\n        }\n    }\n\n    if (lcsSize === 0) {\n        return false\n    }\n\n    return {\n        oldValue: index[0] - lcsSize,\n        newValue: index[1] - lcsSize,\n        length: lcsSize,\n    }\n}\n\n/**\n * This should really be a predefined function in Array...\n */\nfunction makeArray(n, v) {\n    return Array(...new Array(n)).map(() => v)\n}\n\n/**\n * Generate arrays that indicate which node belongs to which subset,\n * or whether it's actually an orphan node, existing in only one\n * of the two trees, rather than somewhere in both.\n *\n * So if t1 = <img><canvas><br>, t2 = <canvas><br><img>.\n * The longest subset is \"<canvas><br>\" (length 2), so it will group 0.\n * The second longest is \"<img>\" (length 1), so it will be group 1.\n * gaps1 will therefore be [1,0,0] and gaps2 [0,0,1].\n *\n * If an element is not part of any group, it will stay being 'true', which\n * is the initial value. For example:\n * t1 = <img><p></p><br><canvas>, t2 = <b></b><br><canvas><img>\n *\n * The \"<p></p>\" and \"<b></b>\" do only show up in one of the two and will\n * therefore be marked by \"true\". The remaining parts are parts of the\n * groups 0 and 1:\n * gaps1 = [1, true, 0, 0], gaps2 = [true, 0, 0, 1]\n *\n */\nexport function getGapInformation(t1, t2, stable) {\n    const gaps1 = t1.childNodes ? makeArray(t1.childNodes.length, true) : []\n    const gaps2 = t2.childNodes ? makeArray(t2.childNodes.length, true) : []\n    let group = 0\n\n    // give elements from the same subset the same group number\n    stable.forEach((subset) => {\n        const endOld = subset.oldValue + subset.length\n        const endNew = subset.newValue + subset.length\n\n        for (let j = subset.oldValue; j < endOld; j += 1) {\n            gaps1[j] = group\n        }\n        for (let j = subset.newValue; j < endNew; j += 1) {\n            gaps2[j] = group\n        }\n        group += 1\n    })\n\n    return {\n        gaps1,\n        gaps2,\n    }\n}\n\n/**\n * Find all matching subsets, based on immediate child differences only.\n */\nexport function markSubTrees(oldTree, newTree) {\n    // note: the child lists are views, and so update as we update old/newTree\n    const oldChildren = oldTree.childNodes ? oldTree.childNodes : []\n\n    const newChildren = newTree.childNodes ? newTree.childNodes : []\n    const marked1 = makeArray(oldChildren.length, false)\n    const marked2 = makeArray(newChildren.length, false)\n    const subsets = []\n    let subset = true\n\n    const returnIndex = function () {\n        return arguments[1]\n    }\n\n    const markBoth = (i) => {\n        marked1[subset.oldValue + i] = true\n        marked2[subset.newValue + i] = true\n    }\n\n    while (subset) {\n        subset = findCommonSubsets(oldChildren, newChildren, marked1, marked2)\n        if (subset) {\n            subsets.push(subset)\n            const subsetArray = Array(...new Array(subset.length)).map(\n                returnIndex\n            )\n            subsetArray.forEach((item) => markBoth(item))\n        }\n    }\n\n    oldTree.subsets = subsets\n    oldTree.subsetsAge = 100\n    return subsets\n}\n\nexport class DiffTracker {\n    constructor() {\n        this.list = []\n    }\n\n    add(diffs) {\n        this.list.push(...diffs)\n    }\n    forEach(fn) {\n        this.list.forEach((li) => fn(li))\n    }\n}\n","import { cloneObj } from \"./helpers\"\n\n// ===== Apply a virtual diff =====\n\nfunction getFromVirtualRoute(tree, route) {\n    let node = tree\n    let parentNode\n    let nodeIndex\n\n    route = route.slice()\n    while (route.length > 0) {\n        if (!node.childNodes) {\n            return false\n        }\n        nodeIndex = route.splice(0, 1)[0]\n        parentNode = node\n        node = node.childNodes[nodeIndex]\n    }\n    return {\n        node,\n        parentNode,\n        nodeIndex,\n    }\n}\n\nfunction applyVirtualDiff(\n    tree,\n    diff,\n    options // {preVirtualDiffApply, postVirtualDiffApply, _const}\n) {\n    const routeInfo = getFromVirtualRoute(tree, diff[options._const.route])\n    let node = routeInfo.node\n    const parentNode = routeInfo.parentNode\n    const nodeIndex = routeInfo.nodeIndex\n    const newSubsets = []\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node,\n    }\n\n    if (options.preVirtualDiffApply(info)) {\n        return true\n    }\n\n    let newNode\n    let nodeArray\n    let route\n    let c\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            if (!node.attributes) {\n                node.attributes = {}\n            }\n\n            node.attributes[diff[options._const.name]] =\n                diff[options._const.value]\n\n            if (diff[options._const.name] === \"checked\") {\n                node.checked = true\n            } else if (diff[options._const.name] === \"selected\") {\n                node.selected = true\n            } else if (\n                node.nodeName === \"INPUT\" &&\n                diff[options._const.name] === \"value\"\n            ) {\n                node.value = diff[options._const.value]\n            }\n\n            break\n        case options._const.modifyAttribute:\n            node.attributes[diff[options._const.name]] =\n                diff[options._const.newValue]\n            break\n        case options._const.removeAttribute:\n            delete node.attributes[diff[options._const.name]]\n\n            if (Object.keys(node.attributes).length === 0) {\n                delete node.attributes\n            }\n\n            if (diff[options._const.name] === \"checked\") {\n                node.checked = false\n            } else if (diff[options._const.name] === \"selected\") {\n                delete node.selected\n            } else if (\n                node.nodeName === \"INPUT\" &&\n                diff[options._const.name] === \"value\"\n            ) {\n                delete node.value\n            }\n\n            break\n        case options._const.modifyTextElement:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyValue:\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyChecked:\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            newNode = cloneObj(diff[options._const.newValue])\n            newNode.outerDone = true\n            newNode.innerDone = true\n            newNode.valueDone = true\n            parentNode.childNodes[nodeIndex] = newNode\n            break\n        case options._const.relocateGroup:\n            nodeArray = node.childNodes\n                .splice(diff[options._const.from], diff.groupLength)\n                .reverse()\n            nodeArray.forEach((movedNode) =>\n                node.childNodes.splice(diff[options._const.to], 0, movedNode)\n            )\n            if (node.subsets) {\n                node.subsets.forEach((map) => {\n                    if (\n                        diff[options._const.from] < diff[options._const.to] &&\n                        map.oldValue <= diff[options._const.to] &&\n                        map.oldValue > diff[options._const.from]\n                    ) {\n                        map.oldValue -= diff.groupLength\n                        const splitLength =\n                            map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue:\n                                    diff[options._const.to] + diff.groupLength,\n                                newValue:\n                                    map.newValue + map.length - splitLength,\n                                length: splitLength,\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (\n                        diff[options._const.from] > diff[options._const.to] &&\n                        map.oldValue > diff[options._const.to] &&\n                        map.oldValue < diff[options._const.from]\n                    ) {\n                        map.oldValue += diff.groupLength\n                        const splitLength =\n                            map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue:\n                                    diff[options._const.to] + diff.groupLength,\n                                newValue:\n                                    map.newValue + map.length - splitLength,\n                                length: splitLength,\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (map.oldValue === diff[options._const.from]) {\n                        map.oldValue = diff[options._const.to]\n                    }\n                })\n            }\n\n            break\n        case options._const.removeElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach((map) => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (\n                        map.oldValue < nodeIndex &&\n                        map.oldValue + map.length > nodeIndex\n                    ) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue:\n                                    map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length:\n                                    map.length - nodeIndex + map.oldValue - 1,\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            node = getFromVirtualRoute(tree, route).node\n            newNode = cloneObj(diff[options._const.element])\n            newNode.outerDone = true\n            newNode.innerDone = true\n            newNode.valueDone = true\n\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.subsets) {\n                node.subsets.forEach((map) => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    } else if (\n                        map.oldValue < c &&\n                        map.oldValue + map.length > c\n                    ) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength,\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        case options._const.removeTextElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.nodeName === \"TEXTAREA\") {\n                delete parentNode.value\n            }\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach((map) => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (\n                        map.oldValue < nodeIndex &&\n                        map.oldValue + map.length > nodeIndex\n                    ) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue:\n                                    map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length:\n                                    map.length - nodeIndex + map.oldValue - 1,\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addTextElement:\n            route = diff[options._const.route].slice()\n            c = route.splice(route.length - 1, 1)[0]\n            newNode = {}\n            newNode.nodeName = \"#text\"\n            newNode.data = diff[options._const.value]\n            node = getFromVirtualRoute(tree, route).node\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.nodeName === \"TEXTAREA\") {\n                node.value = diff[options._const.newValue]\n            }\n            if (node.subsets) {\n                node.subsets.forEach((map) => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    }\n                    if (map.oldValue < c && map.oldValue + map.length > c) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength,\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        default:\n            console.log(\"unknown action\")\n    }\n\n    if (node.subsets) {\n        node.subsets = node.subsets.filter(\n            (map) => !map.delete && map.oldValue !== map.newValue\n        )\n        if (newSubsets.length) {\n            node.subsets = node.subsets.concat(newSubsets)\n        }\n    }\n\n    // capture newNode for the callback\n    info.newNode = newNode\n    options.postVirtualDiffApply(info)\n\n    return\n}\n\nexport function applyVirtual(tree, diffs, options) {\n    diffs.forEach((diff) => {\n        applyVirtualDiff(tree, diff, options)\n    })\n    return true\n}\n","export function nodeToObj(aNode, options = {}) {\n    const objNode = {}\n    objNode.nodeName = aNode.nodeName\n    if (objNode.nodeName === \"#text\" || objNode.nodeName === \"#comment\") {\n        objNode.data = aNode.data\n    } else {\n        if (aNode.attributes && aNode.attributes.length > 0) {\n            objNode.attributes = {}\n            const nodeArray = Array.prototype.slice.call(aNode.attributes)\n            nodeArray.forEach(\n                (attribute) =>\n                    (objNode.attributes[attribute.name] = attribute.value)\n            )\n        }\n        if (objNode.nodeName === \"TEXTAREA\") {\n            objNode.value = aNode.value\n        } else if (aNode.childNodes && aNode.childNodes.length > 0) {\n            objNode.childNodes = []\n            const nodeArray = Array.prototype.slice.call(aNode.childNodes)\n            nodeArray.forEach((childNode) =>\n                objNode.childNodes.push(nodeToObj(childNode, options))\n            )\n        }\n        if (options.valueDiffing) {\n            if (\n                aNode.checked !== undefined &&\n                aNode.type &&\n                [\"radio\", \"checkbox\"].includes(aNode.type.toLowerCase())\n            ) {\n                objNode.checked = aNode.checked\n            } else if (aNode.value !== undefined) {\n                objNode.value = aNode.value\n            }\n            if (aNode.selected !== undefined) {\n                objNode.selected = aNode.selected\n            }\n        }\n    }\n    return objNode\n}\n","// from html-parse-stringify (MIT)\n\nconst tagRE = /<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>/g\n\n// re-used obj for quick lookups of components\nconst empty = Object.create ? Object.create(null) : {}\nconst attrRE = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g\n\nfunction unescape(string) {\n    return string\n        .replace(/&lt;/g, \"<\")\n        .replace(/&gt;/g, \">\")\n        .replace(/&amp;/g, \"&\")\n}\n\n// create optimized lookup object for\n// void elements as listed here:\n// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\nconst lookup = {\n    area: true,\n    base: true,\n    br: true,\n    col: true,\n    embed: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    menuItem: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n}\n\nfunction parseTag(tag) {\n    const res = {\n        nodeName: \"\",\n        attributes: {},\n    }\n\n    let tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/)\n    if (tagMatch) {\n        res.nodeName = tagMatch[1].toUpperCase()\n        if (lookup[tagMatch[1]] || tag.charAt(tag.length - 2) === \"/\") {\n            res.voidElement = true\n        }\n\n        // handle comment tag\n        if (res.nodeName.startsWith(\"!--\")) {\n            const endIndex = tag.indexOf(\"-->\")\n            return {\n                type: \"comment\",\n                data: endIndex !== -1 ? tag.slice(4, endIndex) : \"\",\n            }\n        }\n    }\n\n    let reg = new RegExp(attrRE)\n    let result = null\n    let done = false\n    while (!done) {\n        result = reg.exec(tag)\n\n        if (result === null) {\n            done = true\n        } else if (result[0].trim()) {\n            if (result[1]) {\n                let attr = result[1].trim()\n                let arr = [attr, \"\"]\n\n                if (attr.indexOf(\"=\") > -1) arr = attr.split(\"=\")\n\n                res.attributes[arr[0]] = arr[1]\n                reg.lastIndex--\n            } else if (result[2])\n                res.attributes[result[2]] = result[3]\n                    .trim()\n                    .substring(1, result[3].length - 1)\n        }\n    }\n\n    return res\n}\n\nfunction parse(html, options = { components: empty }) {\n    const result = []\n    let current\n    let level = -1\n    const arr = []\n    let inComponent = false\n\n    // handle text at top level\n    if (html.indexOf(\"<\") !== 0) {\n        const end = html.indexOf(\"<\")\n        result.push({\n            nodeName: \"#text\",\n            data: end === -1 ? html : html.substring(0, end),\n        })\n    }\n\n    html.replace(tagRE, (tag, index) => {\n        if (inComponent) {\n            if (tag !== `</${current.nodeName}>`) {\n                return\n            } else {\n                inComponent = false\n            }\n        }\n        const isOpen = tag.charAt(1) !== \"/\"\n        const isComment = tag.startsWith(\"<!--\")\n        const start = index + tag.length\n        const nextChar = html.charAt(start)\n        let parent\n\n        if (isComment) {\n            const comment = parseTag(tag)\n\n            // if we're at root, push new base node\n            if (level < 0) {\n                result.push(comment)\n                return result\n            }\n            parent = arr[level]\n            if (parent) {\n                if (!parent.childNodes) {\n                    parent.childNodes = []\n                }\n                parent.childNodes.push(comment)\n            }\n\n            return result\n        }\n\n        if (isOpen) {\n            current = parseTag(tag)\n            level++\n            if (\n                current.type === \"tag\" &&\n                options.components[current.nodeName]\n            ) {\n                current.type = \"component\"\n                inComponent = true\n            }\n\n            if (\n                !current.voidElement &&\n                !inComponent &&\n                nextChar &&\n                nextChar !== \"<\"\n            ) {\n                if (!current.childNodes) {\n                    current.childNodes = []\n                }\n                current.childNodes.push({\n                    nodeName: \"#text\",\n                    data: unescape(html.slice(start, html.indexOf(\"<\", start))),\n                })\n            }\n\n            // if we're at root, push new base node\n            if (level === 0) {\n                result.push(current)\n            }\n\n            parent = arr[level - 1]\n\n            if (parent) {\n                if (!parent.childNodes) {\n                    parent.childNodes = []\n                }\n                parent.childNodes.push(current)\n            }\n\n            arr[level] = current\n        }\n\n        if (!isOpen || current.voidElement) {\n            if (\n                level > -1 &&\n                (current.voidElement ||\n                    current.nodeName === tag.slice(2, -1).toUpperCase())\n            ) {\n                level--\n                // move current up a level to match the end tag\n                current = level === -1 ? result : arr[level]\n            }\n            if (!inComponent && nextChar !== \"<\" && nextChar) {\n                // trailing text node\n                // if we're at the root, push a base text node. otherwise add as\n                // a child to the current node.\n                parent = level === -1 ? result : arr[level].childNodes || []\n\n                // calculate correct end of the data slice in case there's\n                // no tag after the text node.\n                const end = html.indexOf(\"<\", start)\n                let data = unescape(\n                    html.slice(start, end === -1 ? undefined : end)\n                )\n                parent.push({\n                    nodeName: \"#text\",\n                    data,\n                })\n            }\n        }\n    })\n\n    return result[0]\n}\n\nfunction cleanObj(obj) {\n    delete obj.voidElement\n    if (obj.childNodes) {\n        obj.childNodes.forEach((child) => cleanObj(child))\n    }\n    return obj\n}\n\nexport function stringToObj(string) {\n    return cleanObj(parse(string))\n}\n","import {\n    Diff,\n    DiffTracker,\n    cloneObj,\n    getGapInformation,\n    isEqual,\n    markSubTrees,\n    removeDone,\n    roughlyEqual,\n} from \"./helpers\"\nimport { applyVirtual } from \"./apply\"\nimport { nodeToObj } from \"./fromDOM\"\nimport { stringToObj } from \"./fromString\"\n\n// ===== Create a diff =====\n\nexport class DiffFinder {\n    constructor(t1Node, t2Node, options) {\n        this.options = options\n        this.t1 =\n            typeof HTMLElement !== \"undefined\" && t1Node instanceof HTMLElement\n                ? nodeToObj(t1Node, this.options)\n                : typeof t1Node === \"string\"\n                ? stringToObj(t1Node, this.options)\n                : JSON.parse(JSON.stringify(t1Node))\n        this.t2 =\n            typeof HTMLElement !== \"undefined\" && t2Node instanceof HTMLElement\n                ? nodeToObj(t2Node, this.options)\n                : typeof t2Node === \"string\"\n                ? stringToObj(t2Node, this.options)\n                : JSON.parse(JSON.stringify(t2Node))\n        this.diffcount = 0\n        this.foundAll = false\n        if (this.debug) {\n            this.t1Orig = nodeToObj(t1Node, this.options)\n            this.t2Orig = nodeToObj(t2Node, this.options)\n        }\n\n        this.tracker = new DiffTracker()\n    }\n\n    init() {\n        return this.findDiffs(this.t1, this.t2)\n    }\n\n    findDiffs(t1, t2) {\n        let diffs\n        do {\n            if (this.options.debug) {\n                this.diffcount += 1\n                if (this.diffcount > this.options.diffcap) {\n                    throw new Error(\n                        `surpassed diffcap:${JSON.stringify(\n                            this.t1Orig\n                        )} -> ${JSON.stringify(this.t2Orig)}`\n                    )\n                }\n            }\n            diffs = this.findNextDiff(t1, t2, [])\n\n            if (diffs.length === 0) {\n                // Last check if the elements really are the same now.\n                // If not, remove all info about being done and start over.\n                // Sometimes a node can be marked as done, but the creation of subsequent diffs means that it has to be changed again.\n                if (!isEqual(t1, t2)) {\n                    if (this.foundAll) {\n                        console.error(\"Could not find remaining diffs!\")\n                    } else {\n                        this.foundAll = true\n                        removeDone(t1)\n                        diffs = this.findNextDiff(t1, t2, [])\n                    }\n                }\n            }\n            if (diffs.length > 0) {\n                this.foundAll = false\n                this.tracker.add(diffs)\n                applyVirtual(t1, diffs, this.options)\n            }\n        } while (diffs.length > 0)\n\n        return this.tracker.list\n    }\n\n    findNextDiff(t1, t2, route) {\n        let diffs\n        let fdiffs\n\n        if (this.options.maxDepth && route.length > this.options.maxDepth) {\n            return []\n        }\n        // outer differences?\n        if (!t1.outerDone) {\n            diffs = this.findOuterDiff(t1, t2, route)\n            if (this.options.filterOuterDiff) {\n                fdiffs = this.options.filterOuterDiff(t1, t2, diffs)\n                if (fdiffs) diffs = fdiffs\n            }\n            if (diffs.length > 0) {\n                t1.outerDone = true\n                return diffs\n            } else {\n                t1.outerDone = true\n            }\n        }\n        // inner differences?\n        if (!t1.innerDone) {\n            diffs = this.findInnerDiff(t1, t2, route)\n            if (diffs.length > 0) {\n                return diffs\n            } else {\n                t1.innerDone = true\n            }\n        }\n\n        if (this.options.valueDiffing && !t1.valueDone) {\n            // value differences?\n            diffs = this.findValueDiff(t1, t2, route)\n\n            if (diffs.length > 0) {\n                t1.valueDone = true\n                return diffs\n            } else {\n                t1.valueDone = true\n            }\n        }\n\n        // no differences\n        return []\n    }\n\n    findOuterDiff(t1, t2, route) {\n        const diffs = []\n        let attr\n        let attr1\n        let attr2\n        let attrLength\n        let pos\n        let i\n        if (t1.nodeName !== t2.nodeName) {\n            if (!route.length) {\n                throw new Error(\"Top level nodes have to be of the same kind.\")\n            }\n            return [\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.replaceElement\n                    )\n                    .setValue(this.options._const.oldValue, cloneObj(t1))\n                    .setValue(this.options._const.newValue, cloneObj(t2))\n                    .setValue(this.options._const.route, route),\n            ]\n        }\n        if (\n            route.length &&\n            this.options.maxNodeDiffCount <\n                Math.abs(\n                    (t1.childNodes || []).length - (t2.childNodes || []).length\n                )\n        ) {\n            return [\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.replaceElement\n                    )\n                    .setValue(this.options._const.oldValue, cloneObj(t1))\n                    .setValue(this.options._const.newValue, cloneObj(t2))\n                    .setValue(this.options._const.route, route),\n            ]\n        }\n\n        if (t1.data !== t2.data) {\n            // Comment or text node.\n            if (t1.nodeName === \"#text\") {\n                return [\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.modifyTextElement\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(this.options._const.oldValue, t1.data)\n                        .setValue(this.options._const.newValue, t2.data),\n                ]\n            } else {\n                return [\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.modifyComment\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(this.options._const.oldValue, t1.data)\n                        .setValue(this.options._const.newValue, t2.data),\n                ]\n            }\n        }\n\n        attr1 = t1.attributes ? Object.keys(t1.attributes).sort() : []\n        attr2 = t2.attributes ? Object.keys(t2.attributes).sort() : []\n\n        attrLength = attr1.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr1[i]\n            pos = attr2.indexOf(attr)\n            if (pos === -1) {\n                diffs.push(\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.removeAttribute\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(this.options._const.name, attr)\n                        .setValue(\n                            this.options._const.value,\n                            t1.attributes[attr]\n                        )\n                )\n            } else {\n                attr2.splice(pos, 1)\n                if (t1.attributes[attr] !== t2.attributes[attr]) {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.modifyAttribute\n                            )\n                            .setValue(this.options._const.route, route)\n                            .setValue(this.options._const.name, attr)\n                            .setValue(\n                                this.options._const.oldValue,\n                                t1.attributes[attr]\n                            )\n                            .setValue(\n                                this.options._const.newValue,\n                                t2.attributes[attr]\n                            )\n                    )\n                }\n            }\n        }\n\n        attrLength = attr2.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr2[i]\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.addAttribute\n                    )\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.name, attr)\n                    .setValue(this.options._const.value, t2.attributes[attr])\n            )\n        }\n\n        return diffs\n    }\n\n    findInnerDiff(t1, t2, route) {\n        const t1ChildNodes = t1.childNodes ? t1.childNodes.slice() : []\n        const t2ChildNodes = t2.childNodes ? t2.childNodes.slice() : []\n        const last = Math.max(t1ChildNodes.length, t2ChildNodes.length)\n        let childNodesLengthDifference = Math.abs(\n            t1ChildNodes.length - t2ChildNodes.length\n        )\n        let diffs = []\n        let index = 0\n        if (!this.options.maxChildCount || last < this.options.maxChildCount) {\n            const cachedSubtrees = t1.subsets && t1.subsetsAge--\n            const subtrees = cachedSubtrees\n                ? t1.subsets\n                : t1.childNodes && t2.childNodes\n                ? markSubTrees(t1, t2)\n                : []\n            if (subtrees.length > 0) {\n                /* One or more groups have been identified among the childnodes of t1\n                 * and t2.\n                 */\n                diffs = this.attemptGroupRelocation(\n                    t1,\n                    t2,\n                    subtrees,\n                    route,\n                    cachedSubtrees\n                )\n                if (diffs.length > 0) {\n                    return diffs\n                }\n            }\n        }\n\n        /* 0 or 1 groups of similar child nodes have been found\n         * for t1 and t2. 1 If there is 1, it could be a sign that the\n         * contents are the same. When the number of groups is below 2,\n         * t1 and t2 are made to have the same length and each of the\n         * pairs of child nodes are diffed.\n         */\n\n        for (let i = 0; i < last; i += 1) {\n            const e1 = t1ChildNodes[i]\n            const e2 = t2ChildNodes[i]\n\n            if (childNodesLengthDifference) {\n                /* t1 and t2 have different amounts of childNodes. Add\n                 * and remove as necessary to obtain the same length */\n                if (e1 && !e2) {\n                    if (e1.nodeName === \"#text\") {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeTextElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                )\n                                .setValue(this.options._const.value, e1.data)\n                        )\n                        index -= 1\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cloneObj(e1)\n                                )\n                        )\n                        index -= 1\n                    }\n                } else if (e2 && !e1) {\n                    if (e2.nodeName === \"#text\") {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addTextElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                )\n                                .setValue(this.options._const.value, e2.data)\n                        )\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cloneObj(e2)\n                                )\n                        )\n                    }\n                }\n            }\n            /* We are now guaranteed that childNodes e1 and e2 exist,\n             * and that they can be diffed.\n             */\n            /* Diffs in child nodes should not affect the parent node,\n             * so we let these diffs be submitted together with other\n             * diffs.\n             */\n\n            if (e1 && e2) {\n                if (\n                    !this.options.maxChildCount ||\n                    last < this.options.maxChildCount\n                ) {\n                    diffs = diffs.concat(\n                        this.findNextDiff(e1, e2, route.concat(index))\n                    )\n                } else if (!isEqual(e1, e2)) {\n                    if (t1ChildNodes.length > t2ChildNodes.length) {\n                        if (e1.nodeName === \"#text\") {\n                            diffs.push(\n                                new Diff()\n                                    .setValue(\n                                        this.options._const.action,\n                                        this.options._const.removeTextElement\n                                    )\n                                    .setValue(\n                                        this.options._const.route,\n                                        route.concat(index)\n                                    )\n                                    .setValue(\n                                        this.options._const.value,\n                                        e1.data\n                                    )\n                            )\n                        } else {\n                            diffs.push(\n                                new Diff()\n                                    .setValue(\n                                        this.options._const.action,\n                                        this.options._const.removeElement\n                                    )\n                                    .setValue(\n                                        this.options._const.element,\n                                        cloneObj(e1)\n                                    )\n                                    .setValue(\n                                        this.options._const.route,\n                                        route.concat(index)\n                                    )\n                            )\n                        }\n                        t1ChildNodes.splice(i, 1)\n                        i -= 1\n                        index -= 1\n\n                        childNodesLengthDifference -= 1\n                    } else if (t1ChildNodes.length < t2ChildNodes.length) {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addElement\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cloneObj(e2)\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                ),\n                        ])\n                        t1ChildNodes.splice(i, 0, {})\n                        childNodesLengthDifference -= 1\n                    } else {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.replaceElement\n                                )\n                                .setValue(\n                                    this.options._const.oldValue,\n                                    cloneObj(e1)\n                                )\n                                .setValue(\n                                    this.options._const.newValue,\n                                    cloneObj(e2)\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index)\n                                ),\n                        ])\n                    }\n                }\n            }\n            index += 1\n        }\n        t1.innerDone = true\n        return diffs\n    }\n\n    attemptGroupRelocation(t1, t2, subtrees, route, cachedSubtrees) {\n        /* Either t1.childNodes and t2.childNodes have the same length, or\n         * there are at least two groups of similar elements can be found.\n         * attempts are made at equalizing t1 with t2. First all initial\n         * elements with no group affiliation (gaps=true) are removed (if\n         * only in t1) or added (if only in t2). Then the creation of a group\n         * relocation diff is attempted.\n         */\n        const gapInformation = getGapInformation(t1, t2, subtrees)\n        const gaps1 = gapInformation.gaps1\n        const gaps2 = gapInformation.gaps2\n        let shortest = Math.min(gaps1.length, gaps2.length)\n        let destinationDifferent\n        let toGroup\n        let group\n        let node\n        let similarNode\n        let testI\n        const diffs = []\n\n        for (\n            let index2 = 0, index1 = 0;\n            index2 < shortest;\n            index1 += 1, index2 += 1\n        ) {\n            if (\n                cachedSubtrees &&\n                (gaps1[index2] === true || gaps2[index2] === true)\n            ) {\n                // pass\n            } else if (gaps1[index2] === true) {\n                node = t1.childNodes[index1]\n                if (node.nodeName === \"#text\") {\n                    if (t2.childNodes[index2].nodeName === \"#text\") {\n                        if (node.data !== t2.childNodes[index2].data) {\n                            testI = index1\n                            while (\n                                t1.childNodes.length > testI + 1 &&\n                                t1.childNodes[testI + 1].nodeName === \"#text\"\n                            ) {\n                                testI += 1\n                                if (\n                                    t2.childNodes[index2].data ===\n                                    t1.childNodes[testI].data\n                                ) {\n                                    similarNode = true\n                                    break\n                                }\n                            }\n                            if (!similarNode) {\n                                diffs.push(\n                                    new Diff()\n                                        .setValue(\n                                            this.options._const.action,\n                                            this.options._const\n                                                .modifyTextElement\n                                        )\n                                        .setValue(\n                                            this.options._const.route,\n                                            route.concat(index2)\n                                        )\n                                        .setValue(\n                                            this.options._const.oldValue,\n                                            node.data\n                                        )\n                                        .setValue(\n                                            this.options._const.newValue,\n                                            t2.childNodes[index2].data\n                                        )\n                                )\n                                return diffs\n                            }\n                        }\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeTextElement\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index2)\n                                )\n                                .setValue(this.options._const.value, node.data)\n                        )\n                        gaps1.splice(index2, 1)\n                        shortest = Math.min(gaps1.length, gaps2.length)\n                        index2 -= 1\n                    }\n                } else {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.removeElement\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index2)\n                            )\n                            .setValue(\n                                this.options._const.element,\n                                cloneObj(node)\n                            )\n                    )\n                    gaps1.splice(index2, 1)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index2 -= 1\n                }\n            } else if (gaps2[index2] === true) {\n                node = t2.childNodes[index2]\n                if (node.nodeName === \"#text\") {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.addTextElement\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index2)\n                            )\n                            .setValue(this.options._const.value, node.data)\n                    )\n                    gaps1.splice(index2, 0, true)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                } else {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.addElement\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index2)\n                            )\n                            .setValue(\n                                this.options._const.element,\n                                cloneObj(node)\n                            )\n                    )\n                    gaps1.splice(index2, 0, true)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                }\n            } else if (gaps1[index2] !== gaps2[index2]) {\n                if (diffs.length > 0) {\n                    return diffs\n                }\n                // group relocation\n                group = subtrees[gaps1[index2]]\n                toGroup = Math.min(\n                    group.newValue,\n                    t1.childNodes.length - group.length\n                )\n                if (toGroup !== group.oldValue) {\n                    // Check whether destination nodes are different than originating ones.\n                    destinationDifferent = false\n                    for (let j = 0; j < group.length; j += 1) {\n                        if (\n                            !roughlyEqual(\n                                t1.childNodes[toGroup + j],\n                                t1.childNodes[group.oldValue + j],\n                                [],\n                                false,\n                                true\n                            )\n                        ) {\n                            destinationDifferent = true\n                        }\n                    }\n                    if (destinationDifferent) {\n                        return [\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.relocateGroup\n                                )\n                                .setValue(\"groupLength\", group.length)\n                                .setValue(\n                                    this.options._const.from,\n                                    group.oldValue\n                                )\n                                .setValue(this.options._const.to, toGroup)\n                                .setValue(this.options._const.route, route),\n                        ]\n                    }\n                }\n            }\n        }\n        return diffs\n    }\n\n    findValueDiff(t1, t2, route) {\n        // Differences of value. Only useful if the value/selection/checked value\n        // differs from what is represented in the DOM. For example in the case\n        // of filled out forms, etc.\n        const diffs = []\n\n        if (t1.selected !== t2.selected) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifySelected\n                    )\n                    .setValue(this.options._const.oldValue, t1.selected)\n                    .setValue(this.options._const.newValue, t2.selected)\n                    .setValue(this.options._const.route, route)\n            )\n        }\n\n        if (\n            (t1.value || t2.value) &&\n            t1.value !== t2.value &&\n            t1.nodeName !== \"OPTION\"\n        ) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifyValue\n                    )\n                    .setValue(this.options._const.oldValue, t1.value || \"\")\n                    .setValue(this.options._const.newValue, t2.value || \"\")\n                    .setValue(this.options._const.route, route)\n            )\n        }\n        if (t1.checked !== t2.checked) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifyChecked\n                    )\n                    .setValue(this.options._const.oldValue, t1.checked)\n                    .setValue(this.options._const.newValue, t2.checked)\n                    .setValue(this.options._const.route, route)\n            )\n        }\n\n        return diffs\n    }\n}\n","import { applyDOM, undoDOM } from \"./dom/index\"\nimport { DiffFinder } from \"./virtual/index\"\nexport { nodeToObj, stringToObj } from \"./virtual/index\"\n\nconst DEFAULT_OPTIONS = {\n    debug: false,\n    diffcap: 10, // Limit for how many diffs are accepting when debugging. Inactive when debug is false.\n    maxDepth: false, // False or a numeral. If set to a numeral, limits the level of depth that the the diff mechanism looks for differences. If false, goes through the entire tree.\n    maxChildCount: 50, // False or a numeral. If set to a numeral, only does a simplified form of diffing of contents so that the number of diffs cannot be higher than the number of child nodes.\n    valueDiffing: true, // Whether to take into consideration the values of forms that differ from auto assigned values (when a user fills out a form).\n    // syntax: textDiff: function (node, currentValue, expectedValue, newValue)\n    textDiff(node, currentValue, expectedValue, newValue) {\n        node.data = newValue\n        return\n    },\n    // empty functions were benchmarked as running faster than both\n    // `f && f()` and `if (f) { f(); }`\n    preVirtualDiffApply() {},\n    postVirtualDiffApply() {},\n    preDiffApply() {},\n    postDiffApply() {},\n    filterOuterDiff: null,\n    compress: false, // Whether to work with compressed diffs\n    _const: false, // object with strings for every change types to be used in diffs.\n    document:\n        typeof window !== \"undefined\" && window.document\n            ? window.document\n            : false,\n}\n\nexport class DiffDOM {\n    constructor(options = {}) {\n        this.options = options\n        // IE11 doesn't have Object.assign and buble doesn't translate object spreaders\n        // by default, so this is the safest way of doing it currently.\n        Object.entries(DEFAULT_OPTIONS).forEach(([key, value]) => {\n            if (!Object.prototype.hasOwnProperty.call(this.options, key)) {\n                this.options[key] = value\n            }\n        })\n\n        if (!this.options._const) {\n            const varNames = [\n                \"addAttribute\",\n                \"modifyAttribute\",\n                \"removeAttribute\",\n                \"modifyTextElement\",\n                \"relocateGroup\",\n                \"removeElement\",\n                \"addElement\",\n                \"removeTextElement\",\n                \"addTextElement\",\n                \"replaceElement\",\n                \"modifyValue\",\n                \"modifyChecked\",\n                \"modifySelected\",\n                \"modifyComment\",\n                \"action\",\n                \"route\",\n                \"oldValue\",\n                \"newValue\",\n                \"element\",\n                \"group\",\n                \"from\",\n                \"to\",\n                \"name\",\n                \"value\",\n                \"data\",\n                \"attributes\",\n                \"nodeName\",\n                \"childNodes\",\n                \"checked\",\n                \"selected\",\n            ]\n            this.options._const = {}\n            if (this.options.compress) {\n                varNames.forEach(\n                    (varName, index) => (this.options._const[varName] = index)\n                )\n            } else {\n                varNames.forEach(\n                    (varName) => (this.options._const[varName] = varName)\n                )\n            }\n        }\n\n        this.DiffFinder = DiffFinder\n    }\n\n    apply(tree, diffs) {\n        return applyDOM(tree, diffs, this.options)\n    }\n\n    undo(tree, diffs) {\n        return undoDOM(tree, diffs, this.options)\n    }\n\n    diff(t1Node, t2Node) {\n        const finder = new this.DiffFinder(t1Node, t2Node, this.options)\n        return finder.init()\n    }\n}\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?l(1,0):l(31,11);case f:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,l=this;r=Number(r);var $=O.p(h),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===f)return this.set(f,this.$M+r);if($===c)return this.set(c,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},$={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||$[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,v=this-M,g=O.m(this,M);return g=($={},$[c]=g/12,$[f]=g,$[h]=g/3,$[o]=(v-m)/6048e5,$[a]=(v-m)/864e5,$[u]=v/n,$[s]=v/e,$[i]=v/t,$)[y]||v,l?g:O.a(g)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_customParseFormat=t()}(this,(function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"},t=/(\\[[^[]*\\])|([-_:/.,()\\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,n=/\\d\\d/,r=/\\d\\d?/,i=/\\d*[^-_:/,()\\s\\d]+/,o={},s=function(e){return(e=+e)+(e>68?1900:2e3)};var a=function(e){return function(t){this[e]=+t}},f=[/[+-]\\d\\d:?(\\d\\d)?|Z/,function(e){(this.zone||(this.zone={})).offset=function(e){if(!e)return 0;if(\"Z\"===e)return 0;var t=e.match(/([+-]|\\d\\d)/g),n=60*t[1]+(+t[2]||0);return 0===n?0:\"+\"===t[0]?-n:n}(e)}],h=function(e){var t=o[e];return t&&(t.indexOf?t:t.s.concat(t.f))},u=function(e,t){var n,r=o.meridiem;if(r){for(var i=1;i<=24;i+=1)if(e.indexOf(r(i,0,t))>-1){n=i>12;break}}else n=e===(t?\"pm\":\"PM\");return n},d={A:[i,function(e){this.afternoon=u(e,!1)}],a:[i,function(e){this.afternoon=u(e,!0)}],S:[/\\d/,function(e){this.milliseconds=100*+e}],SS:[n,function(e){this.milliseconds=10*+e}],SSS:[/\\d{3}/,function(e){this.milliseconds=+e}],s:[r,a(\"seconds\")],ss:[r,a(\"seconds\")],m:[r,a(\"minutes\")],mm:[r,a(\"minutes\")],H:[r,a(\"hours\")],h:[r,a(\"hours\")],HH:[r,a(\"hours\")],hh:[r,a(\"hours\")],D:[r,a(\"day\")],DD:[n,a(\"day\")],Do:[i,function(e){var t=o.ordinal,n=e.match(/\\d+/);if(this.day=n[0],t)for(var r=1;r<=31;r+=1)t(r).replace(/\\[|\\]/g,\"\")===e&&(this.day=r)}],M:[r,a(\"month\")],MM:[n,a(\"month\")],MMM:[i,function(e){var t=h(\"months\"),n=(h(\"monthsShort\")||t.map((function(e){return e.slice(0,3)}))).indexOf(e)+1;if(n<1)throw new Error;this.month=n%12||n}],MMMM:[i,function(e){var t=h(\"months\").indexOf(e)+1;if(t<1)throw new Error;this.month=t%12||t}],Y:[/[+-]?\\d+/,a(\"year\")],YY:[n,function(e){this.year=s(e)}],YYYY:[/\\d{4}/,a(\"year\")],Z:f,ZZ:f};function c(n){var r,i;r=n,i=o&&o.formats;for(var s=(n=r.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var o=r&&r.toUpperCase();return n||i[r]||e[r]||i[o].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,n){return t||n.slice(1)}))}))).match(t),a=s.length,f=0;f<a;f+=1){var h=s[f],u=d[h],c=u&&u[0],l=u&&u[1];s[f]=l?{regex:c,parser:l}:h.replace(/^\\[|\\]$/g,\"\")}return function(e){for(var t={},n=0,r=0;n<a;n+=1){var i=s[n];if(\"string\"==typeof i)r+=i.length;else{var o=i.regex,f=i.parser,h=e.slice(r),u=o.exec(h)[0];f.call(t,u),e=e.replace(u,\"\")}}return function(e){var t=e.afternoon;if(void 0!==t){var n=e.hours;t?n<12&&(e.hours+=12):12===n&&(e.hours=0),delete e.afternoon}}(t),t}}return function(e,t,n){n.p.customParseFormat=!0,e&&e.parseTwoDigitYear&&(s=e.parseTwoDigitYear);var r=t.prototype,i=r.parse;r.parse=function(e){var t=e.date,r=e.utc,s=e.args;this.$u=r;var a=s[1];if(\"string\"==typeof a){var f=!0===s[2],h=!0===s[3],u=f||h,d=s[2];h&&(d=s[2]),o=this.$locale(),!f&&d&&(o=n.Ls[d]),this.$d=function(e,t,n){try{if([\"x\",\"X\"].indexOf(t)>-1)return new Date((\"X\"===t?1e3:1)*e);var r=c(t)(e),i=r.year,o=r.month,s=r.day,a=r.hours,f=r.minutes,h=r.seconds,u=r.milliseconds,d=r.zone,l=new Date,m=s||(i||o?1:l.getDate()),M=i||l.getFullYear(),Y=0;i&&!o||(Y=o>0?o-1:l.getMonth());var p=a||0,v=f||0,D=h||0,g=u||0;return d?new Date(Date.UTC(M,Y,m,p,v,D,g+60*d.offset*1e3)):n?new Date(Date.UTC(M,Y,m,p,v,D,g)):new Date(M,Y,m,p,v,D,g)}catch(e){return new Date(\"\")}}(t,a,r),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),u&&t!=this.format(a)&&(this.$d=new Date(\"\")),o={}}else if(a instanceof Array)for(var l=a.length,m=1;m<=l;m+=1){s[1]=a[m-1];var M=n.apply(this,s);if(M.isValid()){this.$d=M.$d,this.$L=M.$L,this.init();break}m===l&&(this.$d=new Date(\"\"))}else i.call(this,e)}}}));"],"names":["objToNode","objNode","insideSvg","options","node","nodeName","document","createTextNode","data","createComment","createElementNS","toLowerCase","createElement","attributes","Object","entries","forEach","key","value","setAttribute","childNodes","childNode","appendChild","valueDiffing","checked","selected","getFromRoute","route","slice","length","c","splice","applyDiff","tree","diff","newNode","reference","nodeArray","_const","info","preDiffApply","action","addAttribute","name","modifyAttribute","newValue","removeAttribute","modifyTextElement","nodeType","textDiff","oldValue","modifyValue","modifyComment","modifyChecked","modifySelected","replaceElement","parentNode","replaceChild","relocateGroup","Array","groupLength","map","removeChild","from","index","to","insertBefore","removeElement","addElement","element","namespaceURI","removeTextElement","addTextElement","console","log","postDiffApply","swap","obj","p1","p2","tmp","undoDOM","diffs","reverse","undoDiff","Diff","constructor","this","toString","JSON","stringify","setValue","aKey","aValue","elementDescriptors","el","output","push","replace","id","findUniqueDescriptors","li","uniqueDescriptors","duplicateDescriptors","descriptor","inUnique","uniqueInBoth","l1","l2","l1Unique","l2Unique","inBoth","keys","removeDone","outerDone","innerDone","valueDone","every","isEqual","e1","e2","Boolean","e1Attributes","e2Attributes","attribute","roughlyEqual","sameSiblings","preventRecursion","nodeList1","nodeList2","childUniqueDescriptors","cloneObj","parse","findCommonSubsets","c1","c2","marked1","marked2","lcsSize","c1Length","c2Length","matches","subsetsSame","some","i","c1Desc","c2Desc","description","c1Index","c1Element","c2Index","c2Element","makeArray","n","v","DiffTracker","list","add","fn","getFromVirtualRoute","nodeIndex","applyVirtual","routeInfo","newSubsets","preVirtualDiffApply","movedNode","subsets","splitLength","delete","filter","concat","postVirtualDiffApply","applyVirtualDiff","nodeToObj","aNode","prototype","call","undefined","type","includes","tagRE","empty","create","attrRE","unescape","string","lookup","area","base","br","col","embed","hr","img","input","keygen","link","menuItem","meta","param","source","track","wbr","parseTag","tag","res","tagMatch","match","toUpperCase","charAt","voidElement","startsWith","endIndex","indexOf","reg","RegExp","result","done","exec","trim","attr","arr","split","lastIndex","substring","cleanObj","child","stringToObj","html","components","current","level","inComponent","end","isOpen","isComment","start","nextChar","parent","comment","DiffFinder","t1Node","t2Node","t1","HTMLElement","t2","diffcount","foundAll","debug","t1Orig","t2Orig","tracker","init","findDiffs","diffcap","Error","findNextDiff","error","fdiffs","maxDepth","findOuterDiff","filterOuterDiff","findInnerDiff","findValueDiff","attr1","attr2","attrLength","pos","maxNodeDiffCount","Math","abs","sort","t1ChildNodes","t2ChildNodes","last","max","childNodesLengthDifference","maxChildCount","cachedSubtrees","subsetsAge","subtrees","oldTree","newTree","oldChildren","newChildren","subset","returnIndex","arguments","item","markBoth","markSubTrees","attemptGroupRelocation","gapInformation","stable","gaps1","gaps2","group","endOld","endNew","j","getGapInformation","destinationDifferent","toGroup","similarNode","testI","shortest","min","index2","index1","DEFAULT_OPTIONS","currentValue","expectedValue","compress","window","DiffDOM","hasOwnProperty","varNames","varName","apply","applyDOM","undo","exports","t","e","r","s","u","a","o","f","h","d","l","$","y","M","weekdays","months","ordinal","m","String","join","z","utcOffset","floor","date","year","month","clone","ceil","p","w","D","ms","Q","g","_","S","args","O","locale","$L","utc","$u","x","$x","$offset","$d","Date","NaN","test","UTC","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","isSame","startOf","endOf","isAfter","isBefore","$g","set","unix","valueOf","getTime","toDate","$locale","weekStart","$set","daysInMonth","get","Number","round","subtract","format","invalidDate","meridiem","YY","YYYY","MM","MMM","monthsShort","MMMM","DD","dd","weekdaysMin","ddd","weekdaysShort","dddd","H","HH","hh","A","mm","ss","SSS","Z","getTimezoneOffset","toJSON","toISOString","toUTCString","T","extend","$i","isDayjs","en","Ls","LTS","LT","L","LL","LLL","LLLL","zone","offset","afternoon","milliseconds","SS","Do","day","Y","ZZ","formats","regex","parser","hours","customParseFormat","parseTwoDigitYear","minutes","seconds"],"mappings":"iOAAO,SAASA,EAAUC,EAASC,EAAWC,GAC1C,IAAIC,EA0CJ,MAzCyB,UAArBH,EAAQI,SACRD,EAAOD,EAAQG,SAASC,eAAeN,EAAQO,MACnB,aAArBP,EAAQI,SACfD,EAAOD,EAAQG,SAASG,cAAcR,EAAQO,OAE1CN,EACAE,EAAOD,EAAQG,SAASI,gBACpB,6BACAT,EAAQI,UAE8B,QAAnCJ,EAAQI,SAASM,eACxBP,EAAOD,EAAQG,SAASI,gBACpB,6BACA,OAEJR,GAAY,GAEZE,EAAOD,EAAQG,SAASM,cAAcX,EAAQI,UAE9CJ,EAAQY,YACRC,OAAOC,QAAQd,EAAQY,YAAYG,SAAQ,EAAEC,EAAKC,KAC9Cd,EAAKe,aAAaF,EAAKC,KAG3BjB,EAAQmB,YACRnB,EAAQmB,WAAWJ,SAASK,GACxBjB,EAAKkB,YAAYtB,EAAUqB,EAAWnB,EAAWC,MAGrDA,EAAQoB,eACJtB,EAAQiB,QACRd,EAAKc,MAAQjB,EAAQiB,OAErBjB,EAAQuB,UACRpB,EAAKoB,QAAUvB,EAAQuB,SAEvBvB,EAAQwB,WACRrB,EAAKqB,SAAWxB,EAAQwB,YAI7BrB,CACX,CCxCA,SAASsB,EAAatB,EAAMuB,GAExB,IADAA,EAAQA,EAAMC,QACPD,EAAME,OAAS,GAAG,CACrB,IAAKzB,EAAKgB,WACN,OAAO,EAEX,MAAMU,EAAIH,EAAMI,OAAO,EAAG,GAAG,GAC7B3B,EAAOA,EAAKgB,WAAWU,EAC3B,CACA,OAAO1B,CACX,CAEO,SAAS4B,EACZC,EACAC,EACA/B,GAEA,IACIgC,EACAC,EACAT,EACAU,EACAP,EALA1B,EAAOsB,EAAaO,EAAMC,EAAK/B,EAAQmC,OAAOX,QAQlD,MAAMY,EAAO,CACTL,OACA9B,QAGJ,GAAID,EAAQqC,aAAaD,GACrB,OAAO,EAGX,OAAQL,EAAK/B,EAAQmC,OAAOG,SACxB,KAAKtC,EAAQmC,OAAOI,aAChB,IAAKtC,IAASA,EAAKe,aACf,OAAO,EAEXf,EAAKe,aACDe,EAAK/B,EAAQmC,OAAOK,MACpBT,EAAK/B,EAAQmC,OAAOpB,QAExB,MACJ,KAAKf,EAAQmC,OAAOM,gBAChB,IAAKxC,IAASA,EAAKe,aACf,OAAO,EAEXf,EAAKe,aACDe,EAAK/B,EAAQmC,OAAOK,MACpBT,EAAK/B,EAAQmC,OAAOO,WAGF,UAAlBzC,EAAKC,UACyB,UAA9B6B,EAAK/B,EAAQmC,OAAOK,QAEpBvC,EAAKc,MAAQgB,EAAK/B,EAAQmC,OAAOO,WAErC,MACJ,KAAK1C,EAAQmC,OAAOQ,gBAChB,IAAK1C,IAASA,EAAK0C,gBACf,OAAO,EAEX1C,EAAK0C,gBAAgBZ,EAAK/B,EAAQmC,OAAOK,OACzC,MACJ,KAAKxC,EAAQmC,OAAOS,kBAChB,IAAK3C,GAA0B,IAAlBA,EAAK4C,SACd,OAAO,EAEX7C,EAAQ8C,SACJ7C,EACAA,EAAKI,KACL0B,EAAK/B,EAAQmC,OAAOY,UACpBhB,EAAK/B,EAAQmC,OAAOO,WAExB,MACJ,KAAK1C,EAAQmC,OAAOa,YAChB,IAAK/C,QAA8B,IAAfA,EAAKc,MACrB,OAAO,EAEXd,EAAKc,MAAQgB,EAAK/B,EAAQmC,OAAOO,UACjC,MACJ,KAAK1C,EAAQmC,OAAOc,cAChB,IAAKhD,QAA6B,IAAdA,EAAKI,KACrB,OAAO,EAEXL,EAAQ8C,SACJ7C,EACAA,EAAKI,KACL0B,EAAK/B,EAAQmC,OAAOY,UACpBhB,EAAK/B,EAAQmC,OAAOO,WAExB,MACJ,KAAK1C,EAAQmC,OAAOe,cAChB,IAAKjD,QAAgC,IAAjBA,EAAKoB,QACrB,OAAO,EAEXpB,EAAKoB,QAAUU,EAAK/B,EAAQmC,OAAOO,UACnC,MACJ,KAAK1C,EAAQmC,OAAOgB,eAChB,IAAKlD,QAAiC,IAAlBA,EAAKqB,SACrB,OAAO,EAEXrB,EAAKqB,SAAWS,EAAK/B,EAAQmC,OAAOO,UACpC,MACJ,KAAK1C,EAAQmC,OAAOiB,eAChBnD,EAAKoD,WAAWC,aACZzD,EACIkC,EAAK/B,EAAQmC,OAAOO,UAEhB,QADJX,EAAK/B,EAAQmC,OAAOO,UAAUxC,SAASM,cAEvCR,GAEJC,GAEJ,MACJ,KAAKD,EAAQmC,OAAOoB,cAChBrB,EAAYsB,SAAS,IAAIA,MAAMzB,EAAK0B,cAAcC,KAAI,IAClDzD,EAAK0D,YAAY1D,EAAKgB,WAAWc,EAAK/B,EAAQmC,OAAOyB,UAEzD1B,EAAUrB,SAAQ,CAACK,EAAW2C,KACZ,IAAVA,IACA5B,EAAYhC,EAAKgB,WAAWc,EAAK/B,EAAQmC,OAAO2B,MAEpD7D,EAAK8D,aAAa7C,EAAWe,GAAa,KAAK,IAEnD,MACJ,KAAKjC,EAAQmC,OAAO6B,cAChB/D,EAAKoD,WAAWM,YAAY1D,GAC5B,MACJ,KAAKD,EAAQmC,OAAO8B,WAChBzC,EAAQO,EAAK/B,EAAQmC,OAAOX,OAAOC,QACnCE,EAAIH,EAAMI,OAAOJ,EAAME,OAAS,EAAG,GAAG,GACtCzB,EAAOsB,EAAaO,EAAMN,GAC1BvB,EAAK8D,aACDlE,EACIkC,EAAK/B,EAAQmC,OAAO+B,SACE,+BAAtBjE,EAAKkE,aACLnE,GAEJC,EAAKgB,WAAWU,IAAM,MAE1B,MACJ,KAAK3B,EAAQmC,OAAOiC,kBAChB,IAAKnE,GAA0B,IAAlBA,EAAK4C,SACd,OAAO,EAEX5C,EAAKoD,WAAWM,YAAY1D,GAC5B,MACJ,KAAKD,EAAQmC,OAAOkC,eAOhB,GANA7C,EAAQO,EAAK/B,EAAQmC,OAAOX,OAAOC,QACnCE,EAAIH,EAAMI,OAAOJ,EAAME,OAAS,EAAG,GAAG,GACtCM,EAAUhC,EAAQG,SAASC,eACvB2B,EAAK/B,EAAQmC,OAAOpB,QAExBd,EAAOsB,EAAaO,EAAMN,IACrBvB,IAASA,EAAKgB,WACf,OAAO,EAEXhB,EAAK8D,aAAa/B,EAAS/B,EAAKgB,WAAWU,IAAM,MACjD,MACJ,QACI2C,QAAQC,IAAI,kBAQpB,OAHAnC,EAAKJ,QAAUA,EACfhC,EAAQwE,cAAcpC,IAEf,CACX,CC3KA,SAASqC,EAAKC,EAAKC,EAAIC,GACnB,MAAMC,EAAMH,EAAIC,GAChBD,EAAIC,GAAMD,EAAIE,GACdF,EAAIE,GAAMC,CACd,CAqEO,SAASC,EAAQhD,EAAMiD,EAAO/E,GAC5B+E,EAAMrD,SACPqD,EAAQ,CAACA,KAEbA,EAAQA,EAAMtD,SACRuD,UACND,EAAMlE,SAASkB,KAzEnB,SACID,EACAC,EACA/B,GAEA,OAAQ+B,EAAK/B,EAAQmC,OAAOG,SACxB,KAAKtC,EAAQmC,OAAOI,aAChBR,EAAK/B,EAAQmC,OAAOG,QAAUtC,EAAQmC,OAAOQ,gBAC7Cd,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,KAAKA,EAAQmC,OAAOM,gBAChBgC,EAAK1C,EAAM/B,EAAQmC,OAAOY,SAAU/C,EAAQmC,OAAOO,UACnDb,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,KAAKA,EAAQmC,OAAOQ,gBAChBZ,EAAK/B,EAAQmC,OAAOG,QAAUtC,EAAQmC,OAAOI,aAC7CV,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,KAAKA,EAAQmC,OAAOS,kBAIpB,KAAK5C,EAAQmC,OAAOa,YAIpB,KAAKhD,EAAQmC,OAAOc,cAIpB,KAAKjD,EAAQmC,OAAOe,cAIpB,KAAKlD,EAAQmC,OAAOgB,eAIpB,KAAKnD,EAAQmC,OAAOiB,eAChBqB,EAAK1C,EAAM/B,EAAQmC,OAAOY,SAAU/C,EAAQmC,OAAOO,UACnDb,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,KAAKA,EAAQmC,OAAOoB,cAChBkB,EAAK1C,EAAM/B,EAAQmC,OAAOyB,KAAM5D,EAAQmC,OAAO2B,IAC/CjC,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,KAAKA,EAAQmC,OAAO6B,cAChBjC,EAAK/B,EAAQmC,OAAOG,QAAUtC,EAAQmC,OAAO8B,WAC7CpC,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,KAAKA,EAAQmC,OAAO8B,WAChBlC,EAAK/B,EAAQmC,OAAOG,QAAUtC,EAAQmC,OAAO6B,cAC7CnC,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,KAAKA,EAAQmC,OAAOiC,kBAChBrC,EAAK/B,EAAQmC,OAAOG,QAAUtC,EAAQmC,OAAOkC,eAC7CxC,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,KAAKA,EAAQmC,OAAOkC,eAChBtC,EAAK/B,EAAQmC,OAAOG,QAAUtC,EAAQmC,OAAOiC,kBAC7CvC,EAAUC,EAAMC,EAAM/B,GACtB,MACJ,QACIsE,QAAQC,IAAI,kBAExB,CASQU,CAASnD,EAAMC,EAAM/B,EAAQ,GAErC,CCtFO,MAAMkF,EACTC,YAAYnF,EAAU,IAClBW,OAAOC,QAAQZ,GAASa,SAAQ,EAAEC,EAAKC,KAAYqE,KAAKtE,GAAOC,GACnE,CAEAsE,WACI,OAAOC,KAAKC,UAAUH,KAC1B,CAEAI,SAASC,EAAMC,GAEX,OADAN,KAAKK,GAAQC,EACNN,IACX,EAGJ,SAASO,EAAmBC,GACxB,MAAMC,EAAS,GAiBf,OAhBAA,EAAOC,KAAKF,EAAG1F,UACK,UAAhB0F,EAAG1F,UAAwC,aAAhB0F,EAAG1F,UAC1B0F,EAAGlF,aACCkF,EAAGlF,WAAkB,OACrBmF,EAAOC,KACF,GAAEF,EAAG1F,YAAY0F,EAAGlF,WAAkB,MAAEqF,QACrC,KACA,QAIRH,EAAGlF,WAAWsF,IACdH,EAAOC,KAAM,GAAEF,EAAG1F,YAAY0F,EAAGlF,WAAWsF,OAIjDH,CACX,CAEA,SAASI,EAAsBC,GAC3B,MAAMC,EAAoB,CAAA,EACpBC,EAAuB,CAAA,EAe7B,OAbAF,EAAGrF,SAASZ,IACR0F,EAAmB1F,GAAMY,SAASwF,IAC9B,MAAMC,EAAWD,KAAcF,EAE1BG,GADWD,KAAcD,EAGnBE,WACAH,EAAkBE,GACzBD,EAAqBC,IAAc,GAHnCF,EAAkBE,IAAc,CAIpC,GACF,IAGCF,CACX,CAEA,SAASI,EAAaC,EAAIC,GACtB,MAAMC,EAAWT,EAAsBO,GACjCG,EAAWV,EAAsBQ,GACjCG,EAAS,CAAA,EAQf,OANAjG,OAAOkG,KAAKH,GAAU7F,SAASC,IACvB6F,EAAS7F,KACT8F,EAAO9F,IAAO,EAClB,IAGG8F,CACX,CAEO,SAASE,EAAWhF,GAIvB,cAHOA,EAAKiF,iBACLjF,EAAKkF,iBACLlF,EAAKmF,WACRnF,EAAKb,YACEa,EAAKb,WAAWiG,MAAMJ,EAIrC,CAEO,SAASK,EAAQC,EAAIC,GACxB,IACK,CAAC,WAAY,QAAS,UAAW,WAAY,QAAQH,OACjDhD,GACOkD,EAAGlD,KAAamD,EAAGnD,KAO/B,OAAO,EAGX,GAAIoD,QAAQF,EAAG1G,cAAgB4G,QAAQD,EAAG3G,YACtC,OAAO,EAGX,GAAI4G,QAAQF,EAAGnG,cAAgBqG,QAAQD,EAAGpG,YACtC,OAAO,EAEX,GAAImG,EAAG1G,WAAY,CACf,MAAM6G,EAAe5G,OAAOkG,KAAKO,EAAG1G,YAC9B8G,EAAe7G,OAAOkG,KAAKQ,EAAG3G,YAEpC,GAAI6G,EAAa7F,SAAW8F,EAAa9F,OACrC,OAAO,EAEX,IACK6F,EAAaL,OAAOO,GACbL,EAAG1G,WAAW+G,KAAeJ,EAAG3G,WAAW+G,KAMnD,OAAO,CAEf,CACA,GAAIL,EAAGnG,WAAY,CACf,GAAImG,EAAGnG,WAAWS,SAAW2F,EAAGpG,WAAWS,OACvC,OAAO,EAEX,IACK0F,EAAGnG,WAAWiG,OAAM,CAAChG,EAAW2C,IAC7BsD,EAAQjG,EAAWmG,EAAGpG,WAAW4C,MAGrC,OAAO,CAEf,CAEA,OAAO,CACX,CAEO,SAAS6D,EACZN,EACAC,EACAlB,EACAwB,EACAC,GAEA,IAAKR,IAAOC,EACR,OAAO,EAGX,GAAID,EAAGlH,WAAamH,EAAGnH,SACnB,OAAO,EAGX,GAAoB,UAAhBkH,EAAGlH,SAIH,QAAO0H,GAA0BR,EAAG/G,OAASgH,EAAGhH,KAGpD,GAAI+G,EAAGlH,YAAYiG,EACf,OAAO,EAGX,GAAIiB,EAAG1G,YAAc2G,EAAG3G,WAAY,CAChC,GAAI0G,EAAG1G,WAAWsF,GAAI,CAClB,GAAIoB,EAAG1G,WAAWsF,KAAOqB,EAAG3G,WAAWsF,GACnC,OAAO,EAGP,GADsB,GAAEoB,EAAGlH,YAAYkH,EAAG1G,WAAWsF,OACjCG,EAChB,OAAO,CAGnB,CACA,GACIiB,EAAG1G,WAAkB,OACrB0G,EAAG1G,WAAkB,QAAM2G,EAAG3G,WAAkB,MAClD,CAIE,GAHyB,GAAE0G,EAAGlH,YAAYkH,EAAG1G,WAClC,MACTqF,QAAQ,KAAM,SACOI,EACnB,OAAO,CAEf,CACJ,CAEA,GAAIwB,EACA,OAAO,EAGX,MAAME,EAAYT,EAAGnG,WAAamG,EAAGnG,WAAWQ,QAAQuD,UAAY,GAC9D8C,EAAYT,EAAGpG,WAAaoG,EAAGpG,WAAWQ,QAAQuD,UAAY,GAEpE,GAAI6C,EAAUnG,SAAWoG,EAAUpG,OAC/B,OAAO,EAGX,GAAIkG,EACA,OAAOC,EAAUX,OACb,CAAChD,EAASL,IAAUK,EAAQhE,WAAa4H,EAAUjE,GAAO3D,WAE3D,CAGH,MAAM6H,EAAyBxB,EAAasB,EAAWC,GACvD,OAAOD,EAAUX,OAAM,CAAChD,EAASL,IAC7B6D,EACIxD,EACA4D,EAAUjE,GACVkE,GACA,GACA,IAGZ,CACJ,CAEO,SAASC,EAAStD,GAErB,OAAOY,KAAK2C,MAAM3C,KAAKC,UAAUb,GACrC,CAIA,SAASwD,EAAkBC,EAAIC,EAAIC,EAASC,GACxC,IAAIC,EAAU,EACV1E,EAAQ,GACZ,MAAM2E,EAAWL,EAAGzG,OACd+G,EAAWL,EAAG1G,OAGhBgH,EAAUlF,SAAS,IAAIA,MAAMgF,EAAW,IAAI9E,KAAI,IAAM,KAEpDyC,EAAoBI,EAAa4B,EAAIC,GAE3C,IAGIO,EAAcH,IAAaC,EAE3BE,GACAR,EAAGS,MAAK,CAAC1E,EAAS2E,KACd,MAAMC,EAASnD,EAAmBzB,GAC5B6E,EAASpD,EAAmByC,EAAGS,IACrC,OAAIC,EAAOpH,SAAWqH,EAAOrH,QACzBiH,GAAc,GACP,IAEXG,EAAOF,MAAK,CAACI,EAAaH,KACtB,GAAIG,IAAgBD,EAAOF,GAEvB,OADAF,GAAc,GACP,CACX,KAECA,QAAL,EAEA,IAKR,IAAK,IAAIM,EAAU,EAAGA,EAAUT,EAAUS,IAAW,CACjD,MAAMC,EAAYf,EAAGc,GACrB,IAAK,IAAIE,EAAU,EAAGA,EAAUV,EAAUU,IAAW,CACjD,MAAMC,EAAYhB,EAAGe,GAEhBd,EAAQY,IACRX,EAAQa,KACTzB,EACIwB,EACAE,EACAjD,EACAwC,GAWJD,EAAQO,EAAU,GAAGE,EAAU,GAAK,GARpCT,EAAQO,EAAU,GAAGE,EAAU,GAAKT,EAAQO,GAASE,GAC/CT,EAAQO,GAASE,GAAW,EAC5B,EACFT,EAAQO,EAAU,GAAGE,EAAU,IAAMZ,IACrCA,EAAUG,EAAQO,EAAU,GAAGE,EAAU,GACzCtF,EAAQ,CAACoF,EAAU,EAAGE,EAAU,IAK5C,CACJ,CAEA,OAAgB,IAAZZ,GAIG,CACHxF,SAAUc,EAAM,GAAK0E,EACrB7F,SAAUmB,EAAM,GAAK0E,EACrB7G,OAAQ6G,EAEhB,CAKA,SAASc,EAAUC,EAAGC,GAClB,OAAO/F,SAAS,IAAIA,MAAM8F,IAAI5F,KAAI,IAAM6F,GAC5C,CAqFO,MAAMC,EACTrE,cACIC,KAAKqE,KAAO,EAChB,CAEAC,IAAI3E,GACAK,KAAKqE,KAAK3D,QAAQf,EACtB,CACAlE,QAAQ8I,GACJvE,KAAKqE,KAAK5I,SAASqF,GAAOyD,EAAGzD,IACjC,EC3YJ,SAAS0D,EAAoB9H,EAAMN,GAC/B,IACI6B,EACAwG,EAFA5J,EAAO6B,EAKX,IADAN,EAAQA,EAAMC,QACPD,EAAME,OAAS,GAAG,CACrB,IAAKzB,EAAKgB,WACN,OAAO,EAEX4I,EAAYrI,EAAMI,OAAO,EAAG,GAAG,GAC/ByB,EAAapD,EACbA,EAAOA,EAAKgB,WAAW4I,EAC3B,CACA,MAAO,CACH5J,OACAoD,aACAwG,YAER,CA6SO,SAASC,EAAahI,EAAMiD,EAAO/E,GAItC,OAHA+E,EAAMlE,SAASkB,KA5SnB,SACID,EACAC,EACA/B,GAEA,MAAM+J,EAAYH,EAAoB9H,EAAMC,EAAK/B,EAAQmC,OAAOX,QAChE,IAAIvB,EAAO8J,EAAU9J,KACrB,MAAMoD,EAAa0G,EAAU1G,WACvBwG,EAAYE,EAAUF,UACtBG,EAAa,GAGb5H,EAAO,CACTL,OACA9B,QAGJ,GAAID,EAAQiK,oBAAoB7H,GAC5B,OAAO,EAGX,IAAIJ,EACAE,EACAV,EACAG,EACJ,OAAQI,EAAK/B,EAAQmC,OAAOG,SACxB,KAAKtC,EAAQmC,OAAOI,aACXtC,EAAKS,aACNT,EAAKS,WAAa,IAGtBT,EAAKS,WAAWqB,EAAK/B,EAAQmC,OAAOK,OAChCT,EAAK/B,EAAQmC,OAAOpB,OAEU,YAA9BgB,EAAK/B,EAAQmC,OAAOK,MACpBvC,EAAKoB,SAAU,EACsB,aAA9BU,EAAK/B,EAAQmC,OAAOK,MAC3BvC,EAAKqB,UAAW,EAEE,UAAlBrB,EAAKC,UACyB,UAA9B6B,EAAK/B,EAAQmC,OAAOK,QAEpBvC,EAAKc,MAAQgB,EAAK/B,EAAQmC,OAAOpB,QAGrC,MACJ,KAAKf,EAAQmC,OAAOM,gBAChBxC,EAAKS,WAAWqB,EAAK/B,EAAQmC,OAAOK,OAChCT,EAAK/B,EAAQmC,OAAOO,UACxB,MACJ,KAAK1C,EAAQmC,OAAOQ,uBACT1C,EAAKS,WAAWqB,EAAK/B,EAAQmC,OAAOK,OAEC,IAAxC7B,OAAOkG,KAAK5G,EAAKS,YAAYgB,eACtBzB,EAAKS,WAGkB,YAA9BqB,EAAK/B,EAAQmC,OAAOK,MACpBvC,EAAKoB,SAAU,EACsB,aAA9BU,EAAK/B,EAAQmC,OAAOK,aACpBvC,EAAKqB,SAEM,UAAlBrB,EAAKC,UACyB,UAA9B6B,EAAK/B,EAAQmC,OAAOK,cAEbvC,EAAKc,MAGhB,MACJ,KAAKf,EAAQmC,OAAOS,kBAChB3C,EAAKI,KAAO0B,EAAK/B,EAAQmC,OAAOO,UAChC,MACJ,KAAK1C,EAAQmC,OAAOa,YAChB/C,EAAKc,MAAQgB,EAAK/B,EAAQmC,OAAOO,UACjC,MACJ,KAAK1C,EAAQmC,OAAOc,cAChBhD,EAAKI,KAAO0B,EAAK/B,EAAQmC,OAAOO,UAChC,MACJ,KAAK1C,EAAQmC,OAAOe,cAChBjD,EAAKoB,QAAUU,EAAK/B,EAAQmC,OAAOO,UACnC,MACJ,KAAK1C,EAAQmC,OAAOgB,eAChBlD,EAAKqB,SAAWS,EAAK/B,EAAQmC,OAAOO,UACpC,MACJ,KAAK1C,EAAQmC,OAAOiB,eAChBpB,EAAUgG,EAASjG,EAAK/B,EAAQmC,OAAOO,WACvCV,EAAQ+E,WAAY,EACpB/E,EAAQgF,WAAY,EACpBhF,EAAQiF,WAAY,EACpB5D,EAAWpC,WAAW4I,GAAa7H,EACnC,MACJ,KAAKhC,EAAQmC,OAAOoB,cAChBrB,EAAYjC,EAAKgB,WACZW,OAAOG,EAAK/B,EAAQmC,OAAOyB,MAAO7B,EAAK0B,aACvCuB,UACL9C,EAAUrB,SAASqJ,GACfjK,EAAKgB,WAAWW,OAAOG,EAAK/B,EAAQmC,OAAO2B,IAAK,EAAGoG,KAEnDjK,EAAKkK,SACLlK,EAAKkK,QAAQtJ,SAAS6C,IAClB,GACI3B,EAAK/B,EAAQmC,OAAOyB,MAAQ7B,EAAK/B,EAAQmC,OAAO2B,KAChDJ,EAAIX,UAAYhB,EAAK/B,EAAQmC,OAAO2B,KACpCJ,EAAIX,SAAWhB,EAAK/B,EAAQmC,OAAOyB,MACrC,CACEF,EAAIX,UAAYhB,EAAK0B,YACrB,MAAM2G,EACF1G,EAAIX,SAAWW,EAAIhC,OAASK,EAAK/B,EAAQmC,OAAO2B,IAChDsG,EAAc,IAEdJ,EAAWlE,KAAK,CACZ/C,SACIhB,EAAK/B,EAAQmC,OAAO2B,IAAM/B,EAAK0B,YACnCf,SACIgB,EAAIhB,SAAWgB,EAAIhC,OAAS0I,EAChC1I,OAAQ0I,IAEZ1G,EAAIhC,QAAU0I,EAErB,MAAM,GACHrI,EAAK/B,EAAQmC,OAAOyB,MAAQ7B,EAAK/B,EAAQmC,OAAO2B,KAChDJ,EAAIX,SAAWhB,EAAK/B,EAAQmC,OAAO2B,KACnCJ,EAAIX,SAAWhB,EAAK/B,EAAQmC,OAAOyB,MACrC,CACEF,EAAIX,UAAYhB,EAAK0B,YACrB,MAAM2G,EACF1G,EAAIX,SAAWW,EAAIhC,OAASK,EAAK/B,EAAQmC,OAAO2B,IAChDsG,EAAc,IAEdJ,EAAWlE,KAAK,CACZ/C,SACIhB,EAAK/B,EAAQmC,OAAO2B,IAAM/B,EAAK0B,YACnCf,SACIgB,EAAIhB,SAAWgB,EAAIhC,OAAS0I,EAChC1I,OAAQ0I,IAEZ1G,EAAIhC,QAAU0I,EAEtB,MAAW1G,EAAIX,WAAahB,EAAK/B,EAAQmC,OAAOyB,QAC5CF,EAAIX,SAAWhB,EAAK/B,EAAQmC,OAAO2B,IACvC,IAIR,MACJ,KAAK9D,EAAQmC,OAAO6B,cAChBX,EAAWpC,WAAWW,OAAOiI,EAAW,GACpCxG,EAAW8G,SACX9G,EAAW8G,QAAQtJ,SAAS6C,IACpBA,EAAIX,SAAW8G,EACfnG,EAAIX,UAAY,EACTW,EAAIX,WAAa8G,EACxBnG,EAAI2G,QAAS,EAEb3G,EAAIX,SAAW8G,GACfnG,EAAIX,SAAWW,EAAIhC,OAASmI,IAExBnG,EAAIX,SAAWW,EAAIhC,OAAS,IAAMmI,EAClCnG,EAAIhC,UAEJsI,EAAWlE,KAAK,CACZpD,SACIgB,EAAIhB,SAAWmH,EAAYnG,EAAIX,SACnCA,SAAU8G,EACVnI,OACIgC,EAAIhC,OAASmI,EAAYnG,EAAIX,SAAW,IAEhDW,EAAIhC,OAASmI,EAAYnG,EAAIX,UAErC,IAGR9C,EAAOoD,EACP,MACJ,KAAKrD,EAAQmC,OAAO8B,WAChBzC,EAAQO,EAAK/B,EAAQmC,OAAOX,OAAOC,QACnCE,EAAIH,EAAMI,OAAOJ,EAAME,OAAS,EAAG,GAAG,GACtCzB,EAAO2J,EAAoB9H,EAAMN,GAAOvB,KACxC+B,EAAUgG,EAASjG,EAAK/B,EAAQmC,OAAO+B,UACvClC,EAAQ+E,WAAY,EACpB/E,EAAQgF,WAAY,EACpBhF,EAAQiF,WAAY,EAEfhH,EAAKgB,aACNhB,EAAKgB,WAAa,IAGlBU,GAAK1B,EAAKgB,WAAWS,OACrBzB,EAAKgB,WAAW6E,KAAK9D,GAErB/B,EAAKgB,WAAWW,OAAOD,EAAG,EAAGK,GAE7B/B,EAAKkK,SACLlK,EAAKkK,QAAQtJ,SAAS6C,IAClB,GAAIA,EAAIX,UAAYpB,EAChB+B,EAAIX,UAAY,OACb,GACHW,EAAIX,SAAWpB,GACf+B,EAAIX,SAAWW,EAAIhC,OAASC,EAC9B,CACE,MAAMyI,EAAc1G,EAAIX,SAAWW,EAAIhC,OAASC,EAChDqI,EAAWlE,KAAK,CACZpD,SAAUgB,EAAIhB,SAAWgB,EAAIhC,OAAS0I,EACtCrH,SAAUpB,EAAI,EACdD,OAAQ0I,IAEZ1G,EAAIhC,QAAU0I,CAClB,KAGR,MACJ,KAAKpK,EAAQmC,OAAOiC,kBAChBf,EAAWpC,WAAWW,OAAOiI,EAAW,GACZ,aAAxBxG,EAAWnD,iBACJmD,EAAWtC,MAElBsC,EAAW8G,SACX9G,EAAW8G,QAAQtJ,SAAS6C,IACpBA,EAAIX,SAAW8G,EACfnG,EAAIX,UAAY,EACTW,EAAIX,WAAa8G,EACxBnG,EAAI2G,QAAS,EAEb3G,EAAIX,SAAW8G,GACfnG,EAAIX,SAAWW,EAAIhC,OAASmI,IAExBnG,EAAIX,SAAWW,EAAIhC,OAAS,IAAMmI,EAClCnG,EAAIhC,UAEJsI,EAAWlE,KAAK,CACZpD,SACIgB,EAAIhB,SAAWmH,EAAYnG,EAAIX,SACnCA,SAAU8G,EACVnI,OACIgC,EAAIhC,OAASmI,EAAYnG,EAAIX,SAAW,IAEhDW,EAAIhC,OAASmI,EAAYnG,EAAIX,UAErC,IAGR9C,EAAOoD,EACP,MACJ,KAAKrD,EAAQmC,OAAOkC,eAChB7C,EAAQO,EAAK/B,EAAQmC,OAAOX,OAAOC,QACnCE,EAAIH,EAAMI,OAAOJ,EAAME,OAAS,EAAG,GAAG,GACtCM,EAAU,CAAA,EACVA,EAAQ9B,SAAW,QACnB8B,EAAQ3B,KAAO0B,EAAK/B,EAAQmC,OAAOpB,OACnCd,EAAO2J,EAAoB9H,EAAMN,GAAOvB,KACnCA,EAAKgB,aACNhB,EAAKgB,WAAa,IAGlBU,GAAK1B,EAAKgB,WAAWS,OACrBzB,EAAKgB,WAAW6E,KAAK9D,GAErB/B,EAAKgB,WAAWW,OAAOD,EAAG,EAAGK,GAEX,aAAlB/B,EAAKC,WACLD,EAAKc,MAAQgB,EAAK/B,EAAQmC,OAAOO,WAEjCzC,EAAKkK,SACLlK,EAAKkK,QAAQtJ,SAAS6C,IAIlB,GAHIA,EAAIX,UAAYpB,IAChB+B,EAAIX,UAAY,GAEhBW,EAAIX,SAAWpB,GAAK+B,EAAIX,SAAWW,EAAIhC,OAASC,EAAG,CACnD,MAAMyI,EAAc1G,EAAIX,SAAWW,EAAIhC,OAASC,EAChDqI,EAAWlE,KAAK,CACZpD,SAAUgB,EAAIhB,SAAWgB,EAAIhC,OAAS0I,EACtCrH,SAAUpB,EAAI,EACdD,OAAQ0I,IAEZ1G,EAAIhC,QAAU0I,CAClB,KAGR,MACJ,QACI9F,QAAQC,IAAI,kBAGhBtE,EAAKkK,UACLlK,EAAKkK,QAAUlK,EAAKkK,QAAQG,QACvB5G,IAASA,EAAI2G,QAAU3G,EAAIX,WAAaW,EAAIhB,WAE7CsH,EAAWtI,SACXzB,EAAKkK,QAAUlK,EAAKkK,QAAQI,OAAOP,KAK3C5H,EAAKJ,QAAUA,EACfhC,EAAQwK,qBAAqBpI,EAGjC,CAIQqI,CAAiB3I,EAAMC,EAAM/B,EAAQ,KAElC,CACX,CCzUO,SAAS0K,EAAUC,EAAO3K,EAAU,IACvC,MAAMF,EAAU,CAAA,EAEhB,GADAA,EAAQI,SAAWyK,EAAMzK,SACA,UAArBJ,EAAQI,UAA6C,aAArBJ,EAAQI,SACxCJ,EAAQO,KAAOsK,EAAMtK,SAClB,CACH,GAAIsK,EAAMjK,YAAciK,EAAMjK,WAAWgB,OAAS,EAAG,CACjD5B,EAAQY,WAAa,GACH8C,MAAMoH,UAAUnJ,MAAMoJ,KAAKF,EAAMjK,YACzCG,SACL4G,GACI3H,EAAQY,WAAW+G,EAAUjF,MAAQiF,EAAU1G,OAE5D,CACA,GAAyB,aAArBjB,EAAQI,SACRJ,EAAQiB,MAAQ4J,EAAM5J,WACnB,GAAI4J,EAAM1J,YAAc0J,EAAM1J,WAAWS,OAAS,EAAG,CACxD5B,EAAQmB,WAAa,GACHuC,MAAMoH,UAAUnJ,MAAMoJ,KAAKF,EAAM1J,YACzCJ,SAASK,GACfpB,EAAQmB,WAAW6E,KAAK4E,EAAUxJ,EAAWlB,KAErD,CACIA,EAAQoB,oBAEc0J,IAAlBH,EAAMtJ,SACNsJ,EAAMI,MACN,CAAC,QAAS,YAAYC,SAASL,EAAMI,KAAKvK,eAE1CV,EAAQuB,QAAUsJ,EAAMtJ,aACDyJ,IAAhBH,EAAM5J,QACbjB,EAAQiB,MAAQ4J,EAAM5J,YAEH+J,IAAnBH,EAAMrJ,WACNxB,EAAQwB,SAAWqJ,EAAMrJ,UAGrC,CACA,OAAOxB,CACX,CCrCA,MAAMmL,EAAQ,2CAGRC,EAAQvK,OAAOwK,OAASxK,OAAOwK,OAAO,MAAQ,GAC9CC,EAAS,qDAEf,SAASC,EAASC,GACd,OAAOA,EACFvF,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,SAAU,IAC3B,CAKA,MAAMwF,EAAS,CACXC,MAAM,EACNC,MAAM,EACNC,IAAI,EACJC,KAAK,EACLC,OAAO,EACPC,IAAI,EACJC,KAAK,EACLC,OAAO,EACPC,QAAQ,EACRC,MAAM,EACNC,UAAU,EACVC,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,OAAO,EACPC,KAAK,GAGT,SAASC,EAASC,GACd,MAAMC,EAAM,CACRxM,SAAU,GACVQ,WAAY,CAAC,GAGjB,IAAIiM,EAAWF,EAAIG,MAAM,uBACzB,GAAID,IACAD,EAAIxM,SAAWyM,EAAS,GAAGE,eACvBtB,EAAOoB,EAAS,KAAsC,MAA/BF,EAAIK,OAAOL,EAAI/K,OAAS,MAC/CgL,EAAIK,aAAc,GAIlBL,EAAIxM,SAAS8M,WAAW,QAAQ,CAChC,MAAMC,EAAWR,EAAIS,QAAQ,UAC7B,MAAO,CACHnC,KAAM,UACN1K,MAAoB,IAAd4M,EAAkBR,EAAIhL,MAAM,EAAGwL,GAAY,GAEzD,CAGJ,IAAIE,EAAM,IAAIC,OAAOhC,GACjBiC,EAAS,KACTC,GAAO,EACX,MAAQA,GAGJ,GAFAD,EAASF,EAAII,KAAKd,GAEH,OAAXY,EACAC,GAAO,OACJ,GAAID,EAAO,GAAGG,OACjB,GAAIH,EAAO,GAAI,CACX,IAAII,EAAOJ,EAAO,GAAGG,OACjBE,EAAM,CAACD,EAAM,IAEbA,EAAKP,QAAQ,MAAQ,IAAGQ,EAAMD,EAAKE,MAAM,MAE7CjB,EAAIhM,WAAWgN,EAAI,IAAMA,EAAI,GAC7BP,EAAIS,WACR,MAAWP,EAAO,KACdX,EAAIhM,WAAW2M,EAAO,IAAMA,EAAO,GAC9BG,OACAK,UAAU,EAAGR,EAAO,GAAG3L,OAAS,IAIjD,OAAOgL,CACX,CA+HA,SAASoB,EAASpJ,GAKd,cAJOA,EAAIqI,YACPrI,EAAIzD,YACJyD,EAAIzD,WAAWJ,SAASkN,GAAUD,EAASC,KAExCrJ,CACX,CAEO,SAASsJ,EAAY1C,GACxB,OAAOwC,EAtIX,SAAeG,EAAMjO,EAAU,CAAEkO,WAAYhD,IACzC,MAAMmC,EAAS,GACf,IAAIc,EACAC,GAAS,EACb,MAAMV,EAAM,GACZ,IAAIW,GAAc,EAGlB,GAA0B,IAAtBJ,EAAKf,QAAQ,KAAY,CACzB,MAAMoB,EAAML,EAAKf,QAAQ,KACzBG,EAAOvH,KAAK,CACR5F,SAAU,QACVG,MAAe,IAATiO,EAAaL,EAAOA,EAAKJ,UAAU,EAAGS,IAEpD,CA4GA,OA1GAL,EAAKlI,QAAQkF,GAAO,CAACwB,EAAK5I,KACtB,GAAIwK,EAAa,CACb,GAAI5B,IAAS,KAAI0B,EAAQjO,YACrB,OAEAmO,GAAc,CAEtB,CACA,MAAME,EAA2B,MAAlB9B,EAAIK,OAAO,GACpB0B,EAAY/B,EAAIO,WAAW,WAC3ByB,EAAQ5K,EAAQ4I,EAAI/K,OACpBgN,EAAWT,EAAKnB,OAAO2B,GAC7B,IAAIE,EAEJ,GAAIH,EAAW,CACX,MAAMI,EAAUpC,EAASC,GAGzB,OAAI2B,EAAQ,GACRf,EAAOvH,KAAK8I,GACLvB,IAEXsB,EAASjB,EAAIU,GACTO,IACKA,EAAO1N,aACR0N,EAAO1N,WAAa,IAExB0N,EAAO1N,WAAW6E,KAAK8I,IAGpBvB,EACX,CA6CA,GA3CIkB,IACAJ,EAAU3B,EAASC,GACnB2B,IAEqB,QAAjBD,EAAQpD,MACR/K,EAAQkO,WAAWC,EAAQjO,YAE3BiO,EAAQpD,KAAO,YACfsD,GAAc,GAIbF,EAAQpB,aACRsB,IACDK,GACa,MAAbA,IAEKP,EAAQlN,aACTkN,EAAQlN,WAAa,IAEzBkN,EAAQlN,WAAW6E,KAAK,CACpB5F,SAAU,QACVG,KAAMgL,EAAS4C,EAAKxM,MAAMgN,EAAOR,EAAKf,QAAQ,IAAKuB,QAK7C,IAAVL,GACAf,EAAOvH,KAAKqI,GAGhBQ,EAASjB,EAAIU,EAAQ,GAEjBO,IACKA,EAAO1N,aACR0N,EAAO1N,WAAa,IAExB0N,EAAO1N,WAAW6E,KAAKqI,IAG3BT,EAAIU,GAASD,KAGZI,GAAUJ,EAAQpB,eAEfqB,GAAS,IACRD,EAAQpB,aACLoB,EAAQjO,WAAauM,EAAIhL,MAAM,GAAI,GAAGoL,iBAE1CuB,IAEAD,GAAqB,IAAXC,EAAef,EAASK,EAAIU,KAErCC,GAA4B,MAAbK,GAAoBA,GAAU,CAI9CC,GAAoB,IAAXP,EAAef,EAASK,EAAIU,GAAOnN,YAAc,GAI1D,MAAMqN,EAAML,EAAKf,QAAQ,IAAKuB,GAC9B,IAAIpO,EAAOgL,EACP4C,EAAKxM,MAAMgN,GAAgB,IAATH,OAAaxD,EAAYwD,IAE/CK,EAAO7I,KAAK,CACR5F,SAAU,QACVG,QAER,CACJ,IAGGgN,EAAO,EAClB,CAWoBpF,CAAMqD,GAC1B,CC9MO,MAAMuD,EACT1J,YAAY2J,EAAQC,EAAQ/O,GACxBoF,KAAKpF,QAAUA,EACfoF,KAAK4J,GACsB,oBAAhBC,aAA+BH,aAAkBG,YAClDvE,EAAUoE,EAAQ1J,KAAKpF,SACL,iBAAX8O,EACPd,EAAYc,EAAQ1J,KAAKpF,SACzBsF,KAAK2C,MAAM3C,KAAKC,UAAUuJ,IACpC1J,KAAK8J,GACsB,oBAAhBD,aAA+BF,aAAkBE,YAClDvE,EAAUqE,EAAQ3J,KAAKpF,SACL,iBAAX+O,EACPf,EAAYe,EAAQ3J,KAAKpF,SACzBsF,KAAK2C,MAAM3C,KAAKC,UAAUwJ,IACpC3J,KAAK+J,UAAY,EACjB/J,KAAKgK,UAAW,EACZhK,KAAKiK,QACLjK,KAAKkK,OAAS5E,EAAUoE,EAAQ1J,KAAKpF,SACrCoF,KAAKmK,OAAS7E,EAAUqE,EAAQ3J,KAAKpF,UAGzCoF,KAAKoK,QAAU,IAAIhG,CACvB,CAEAiG,OACI,OAAOrK,KAAKsK,UAAUtK,KAAK4J,GAAI5J,KAAK8J,GACxC,CAEAQ,UAAUV,EAAIE,GACV,IAAInK,EACJ,EAAG,CACC,GAAIK,KAAKpF,QAAQqP,QACbjK,KAAK+J,WAAa,EACd/J,KAAK+J,UAAY/J,KAAKpF,QAAQ2P,SAC9B,MAAM,IAAIC,MACL,qBAAoBtK,KAAKC,UACtBH,KAAKkK,cACDhK,KAAKC,UAAUH,KAAKmK,WAIxCxK,EAAQK,KAAKyK,aAAab,EAAIE,EAAI,IAEb,IAAjBnK,EAAMrD,SAIDyF,EAAQ6H,EAAIE,KACT9J,KAAKgK,SACL9K,QAAQwL,MAAM,oCAEd1K,KAAKgK,UAAW,EAChBtI,EAAWkI,GACXjK,EAAQK,KAAKyK,aAAab,EAAIE,EAAI,OAI1CnK,EAAMrD,OAAS,IACf0D,KAAKgK,UAAW,EAChBhK,KAAKoK,QAAQ9F,IAAI3E,GACjB+E,EAAakF,EAAIjK,EAAOK,KAAKpF,SAErC,OAAS+E,EAAMrD,OAAS,GAExB,OAAO0D,KAAKoK,QAAQ/F,IACxB,CAEAoG,aAAab,EAAIE,EAAI1N,GACjB,IAAIuD,EACAgL,EAEJ,GAAI3K,KAAKpF,QAAQgQ,UAAYxO,EAAME,OAAS0D,KAAKpF,QAAQgQ,SACrD,MAAO,GAGX,IAAKhB,EAAGjI,UAAW,CAMf,GALAhC,EAAQK,KAAK6K,cAAcjB,EAAIE,EAAI1N,GAC/B4D,KAAKpF,QAAQkQ,kBACbH,EAAS3K,KAAKpF,QAAQkQ,gBAAgBlB,EAAIE,EAAInK,GAC1CgL,IAAQhL,EAAQgL,IAEpBhL,EAAMrD,OAAS,EAEf,OADAsN,EAAGjI,WAAY,EACRhC,EAEPiK,EAAGjI,WAAY,CAEvB,CAEA,IAAKiI,EAAGhI,UAAW,CAEf,GADAjC,EAAQK,KAAK+K,cAAcnB,EAAIE,EAAI1N,GAC/BuD,EAAMrD,OAAS,EACf,OAAOqD,EAEPiK,EAAGhI,WAAY,CAEvB,CAEA,GAAI5B,KAAKpF,QAAQoB,eAAiB4N,EAAG/H,UAAW,CAI5C,GAFAlC,EAAQK,KAAKgL,cAAcpB,EAAIE,EAAI1N,GAE/BuD,EAAMrD,OAAS,EAEf,OADAsN,EAAG/H,WAAY,EACRlC,EAEPiK,EAAG/H,WAAY,CAEvB,CAGA,MAAO,EACX,CAEAgJ,cAAcjB,EAAIE,EAAI1N,GAClB,MAAMuD,EAAQ,GACd,IAAI0I,EACA4C,EACAC,EACAC,EACAC,EACA3H,EACJ,GAAImG,EAAG9O,WAAagP,EAAGhP,SAAU,CAC7B,IAAKsB,EAAME,OACP,MAAM,IAAIkO,MAAM,gDAEpB,MAAO,EACH,IAAI1K,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOiB,gBAEvBoC,SAASJ,KAAKpF,QAAQmC,OAAOY,SAAUiF,EAASgH,IAChDxJ,SAASJ,KAAKpF,QAAQmC,OAAOO,SAAUsF,EAASkH,IAChD1J,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,GAEjD,CACA,GACIA,EAAME,QACN0D,KAAKpF,QAAQyQ,iBACTC,KAAKC,KACA3B,EAAG/N,YAAc,IAAIS,QAAUwN,EAAGjO,YAAc,IAAIS,QAG7D,MAAO,EACH,IAAIwD,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOiB,gBAEvBoC,SAASJ,KAAKpF,QAAQmC,OAAOY,SAAUiF,EAASgH,IAChDxJ,SAASJ,KAAKpF,QAAQmC,OAAOO,SAAUsF,EAASkH,IAChD1J,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,IAIjD,GAAIwN,EAAG3O,OAAS6O,EAAG7O,KAEf,MAAoB,UAAhB2O,EAAG9O,SACI,EACH,IAAIgF,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOS,mBAEvB4C,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,GACpCgE,SAASJ,KAAKpF,QAAQmC,OAAOY,SAAUiM,EAAG3O,MAC1CmF,SAASJ,KAAKpF,QAAQmC,OAAOO,SAAUwM,EAAG7O,OAG5C,EACH,IAAI6E,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOc,eAEvBuC,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,GACpCgE,SAASJ,KAAKpF,QAAQmC,OAAOY,SAAUiM,EAAG3O,MAC1CmF,SAASJ,KAAKpF,QAAQmC,OAAOO,SAAUwM,EAAG7O,OAS3D,IAJAgQ,EAAQrB,EAAGtO,WAAaC,OAAOkG,KAAKmI,EAAGtO,YAAYkQ,OAAS,GAC5DN,EAAQpB,EAAGxO,WAAaC,OAAOkG,KAAKqI,EAAGxO,YAAYkQ,OAAS,GAE5DL,EAAaF,EAAM3O,OACdmH,EAAI,EAAGA,EAAI0H,EAAY1H,IACxB4E,EAAO4C,EAAMxH,GACb2H,EAAMF,EAAMpD,QAAQO,IACP,IAAT+C,EACAzL,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOQ,iBAEvB6C,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,GACpCgE,SAASJ,KAAKpF,QAAQmC,OAAOK,KAAMiL,GACnCjI,SACGJ,KAAKpF,QAAQmC,OAAOpB,MACpBiO,EAAGtO,WAAW+M,MAI1B6C,EAAM1O,OAAO4O,EAAK,GACdxB,EAAGtO,WAAW+M,KAAUyB,EAAGxO,WAAW+M,IACtC1I,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOM,iBAEvB+C,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,GACpCgE,SAASJ,KAAKpF,QAAQmC,OAAOK,KAAMiL,GACnCjI,SACGJ,KAAKpF,QAAQmC,OAAOY,SACpBiM,EAAGtO,WAAW+M,IAEjBjI,SACGJ,KAAKpF,QAAQmC,OAAOO,SACpBwM,EAAGxO,WAAW+M,MAQtC,IADA8C,EAAaD,EAAM5O,OACdmH,EAAI,EAAGA,EAAI0H,EAAY1H,IACxB4E,EAAO6C,EAAMzH,GACb9D,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOI,cAEvBiD,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,GACpCgE,SAASJ,KAAKpF,QAAQmC,OAAOK,KAAMiL,GACnCjI,SAASJ,KAAKpF,QAAQmC,OAAOpB,MAAOmO,EAAGxO,WAAW+M,KAI/D,OAAO1I,CACX,CAEAoL,cAAcnB,EAAIE,EAAI1N,GAClB,MAAMqP,EAAe7B,EAAG/N,WAAa+N,EAAG/N,WAAWQ,QAAU,GACvDqP,EAAe5B,EAAGjO,WAAaiO,EAAGjO,WAAWQ,QAAU,GACvDsP,EAAOL,KAAKM,IAAIH,EAAanP,OAAQoP,EAAapP,QACxD,IAAIuP,EAA6BP,KAAKC,IAClCE,EAAanP,OAASoP,EAAapP,QAEnCqD,EAAQ,GACRlB,EAAQ,EACZ,IAAKuB,KAAKpF,QAAQkR,eAAiBH,EAAO3L,KAAKpF,QAAQkR,cAAe,CAClE,MAAMC,EAAiBnC,EAAG7E,SAAW6E,EAAGoC,aAClCC,EAAWF,EACXnC,EAAG7E,QACH6E,EAAG/N,YAAciO,EAAGjO,WJ8E/B,SAAsBqQ,EAASC,GAElC,MAAMC,EAAcF,EAAQrQ,WAAaqQ,EAAQrQ,WAAa,GAExDwQ,EAAcF,EAAQtQ,WAAasQ,EAAQtQ,WAAa,GACxDoH,EAAUgB,EAAUmI,EAAY9P,QAAQ,GACxC4G,EAAUe,EAAUoI,EAAY/P,QAAQ,GACxCyI,EAAU,GAChB,IAAIuH,GAAS,EAEb,MAAMC,EAAc,WAChB,OAAOC,UAAU,IAQrB,KAAOF,GACHA,EAASxJ,EAAkBsJ,EAAaC,EAAapJ,EAASC,GAC1DoJ,IACAvH,EAAQrE,KAAK4L,GACOlO,SAAS,IAAIA,MAAMkO,EAAOhQ,SAASgC,IACnDiO,GAEQ9Q,SAASgR,IAASC,OAZpBjJ,EAY6BgJ,EAX3CxJ,EAAQqJ,EAAO3O,SAAW8F,IAAK,OAC/BP,EAAQoJ,EAAOhP,SAAWmG,IAAK,GAFjBA,KAYkC,KAMpD,OAFAyI,EAAQnH,QAAUA,EAClBmH,EAAQF,WAAa,IACdjH,CACX,CI9GkB4H,CAAa/C,EAAIE,GACjB,GACN,GAAImC,EAAS3P,OAAS,IAIlBqD,EAAQK,KAAK4M,uBACThD,EACAE,EACAmC,EACA7P,EACA2P,GAEApM,EAAMrD,OAAS,GACf,OAAOqD,CAGnB,CASA,IAAK,IAAI8D,EAAI,EAAGA,EAAIkI,EAAMlI,GAAK,EAAG,CAC9B,MAAMzB,EAAKyJ,EAAahI,GAClBxB,EAAKyJ,EAAajI,GAEpBoI,IAGI7J,IAAOC,EACa,UAAhBD,EAAGlH,UACH6E,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOiC,mBAEvBoB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAO1G,IAEhB2B,SAASJ,KAAKpF,QAAQmC,OAAOpB,MAAOqG,EAAG/G,OAEhDwD,GAAS,IAETkB,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAO6B,eAEvBwB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAO1G,IAEhB2B,SACGJ,KAAKpF,QAAQmC,OAAO+B,QACpB8D,EAASZ,KAGrBvD,GAAS,GAENwD,IAAOD,IACM,UAAhBC,EAAGnH,SACH6E,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOkC,gBAEvBmB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAO1G,IAEhB2B,SAASJ,KAAKpF,QAAQmC,OAAOpB,MAAOsG,EAAGhH,OAGhD0E,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAO8B,YAEvBuB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAO1G,IAEhB2B,SACGJ,KAAKpF,QAAQmC,OAAO+B,QACpB8D,EAASX,OAc7BD,GAAMC,KAEDjC,KAAKpF,QAAQkR,eACdH,EAAO3L,KAAKpF,QAAQkR,cAEpBnM,EAAQA,EAAMwF,OACVnF,KAAKyK,aAAazI,EAAIC,EAAI7F,EAAM+I,OAAO1G,KAEnCsD,EAAQC,EAAIC,KAChBwJ,EAAanP,OAASoP,EAAapP,QACf,UAAhB0F,EAAGlH,SACH6E,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOiC,mBAEvBoB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAO1G,IAEhB2B,SACGJ,KAAKpF,QAAQmC,OAAOpB,MACpBqG,EAAG/G,OAIf0E,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAO6B,eAEvBwB,SACGJ,KAAKpF,QAAQmC,OAAO+B,QACpB8D,EAASZ,IAEZ5B,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAO1G,KAI7BgN,EAAajP,OAAOiH,EAAG,GACvBA,GAAK,EACLhF,GAAS,EAEToN,GAA8B,GACvBJ,EAAanP,OAASoP,EAAapP,QAC1CqD,EAAQA,EAAMwF,OAAO,EACjB,IAAIrF,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAO8B,YAEvBuB,SACGJ,KAAKpF,QAAQmC,OAAO+B,QACpB8D,EAASX,IAEZ7B,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAO1G,MAGzBgN,EAAajP,OAAOiH,EAAG,EAAG,CAAE,GAC5BoI,GAA8B,GAE9BlM,EAAQA,EAAMwF,OAAO,EACjB,IAAIrF,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOiB,gBAEvBoC,SACGJ,KAAKpF,QAAQmC,OAAOY,SACpBiF,EAASZ,IAEZ5B,SACGJ,KAAKpF,QAAQmC,OAAOO,SACpBsF,EAASX,IAEZ7B,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAO1G,QAMrCA,GAAS,CACb,CAEA,OADAmL,EAAGhI,WAAY,EACRjC,CACX,CAEAiN,uBAAuBhD,EAAIE,EAAImC,EAAU7P,EAAO2P,GAQ5C,MAAMc,EJjKP,SAA2BjD,EAAIE,EAAIgD,GACtC,MAAMC,EAAQnD,EAAG/N,WAAaoI,EAAU2F,EAAG/N,WAAWS,QAAQ,GAAQ,GAChE0Q,EAAQlD,EAAGjO,WAAaoI,EAAU6F,EAAGjO,WAAWS,QAAQ,GAAQ,GACtE,IAAI2Q,EAAQ,EAgBZ,OAbAH,EAAOrR,SAAS6Q,IACZ,MAAMY,EAASZ,EAAO3O,SAAW2O,EAAOhQ,OAClC6Q,EAASb,EAAOhP,SAAWgP,EAAOhQ,OAExC,IAAK,IAAI8Q,EAAId,EAAO3O,SAAUyP,EAAIF,EAAQE,GAAK,EAC3CL,EAAMK,GAAKH,EAEf,IAAK,IAAIG,EAAId,EAAOhP,SAAU8P,EAAID,EAAQC,GAAK,EAC3CJ,EAAMI,GAAKH,EAEfA,GAAS,CAAC,IAGP,CACHF,QACAC,QAER,CI0I+BK,CAAkBzD,EAAIE,EAAImC,GAC3Cc,EAAQF,EAAeE,MACvBC,EAAQH,EAAeG,MAC7B,IACIM,EACAC,EACAN,EACApS,EACA2S,EACAC,EANAC,EAAWpC,KAAKqC,IAAIZ,EAAMzQ,OAAQ0Q,EAAM1Q,QAO5C,MAAMqD,EAAQ,GAEd,IACI,IAAIiO,EAAS,EAAGC,EAAS,EACzBD,EAASF,EACTG,GAAU,EAAGD,GAAU,EAEvB,IACI7B,IACmB,IAAlBgB,EAAMa,KAAsC,IAAlBZ,EAAMY,IAG9B,IAAsB,IAAlBb,EAAMa,GAEb,GADA/S,EAAO+O,EAAG/N,WAAWgS,GACC,UAAlBhT,EAAKC,SACL,GAAuC,UAAnCgP,EAAGjO,WAAW+R,GAAQ9S,UACtB,GAAID,EAAKI,OAAS6O,EAAGjO,WAAW+R,GAAQ3S,KAAM,CAE1C,IADAwS,EAAQI,EAEJjE,EAAG/N,WAAWS,OAASmR,EAAQ,GACO,UAAtC7D,EAAG/N,WAAW4R,EAAQ,GAAG3S,UAGzB,GADA2S,GAAS,EAEL3D,EAAGjO,WAAW+R,GAAQ3S,OACtB2O,EAAG/N,WAAW4R,GAAOxS,KACvB,CACEuS,GAAc,EACd,KACJ,CAEJ,IAAKA,EAqBD,OApBA7N,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OACRS,mBAER4C,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAOyI,IAEhBxN,SACGJ,KAAKpF,QAAQmC,OAAOY,SACpB9C,EAAKI,MAERmF,SACGJ,KAAKpF,QAAQmC,OAAOO,SACpBwM,EAAGjO,WAAW+R,GAAQ3S,OAG3B0E,CAEf,OAEAA,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOiC,mBAEvBoB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAOyI,IAEhBxN,SAASJ,KAAKpF,QAAQmC,OAAOpB,MAAOd,EAAKI,OAElD8R,EAAMvQ,OAAOoR,EAAQ,GACrBF,EAAWpC,KAAKqC,IAAIZ,EAAMzQ,OAAQ0Q,EAAM1Q,QACxCsR,GAAU,OAGdjO,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAO6B,eAEvBwB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAOyI,IAEhBxN,SACGJ,KAAKpF,QAAQmC,OAAO+B,QACpB8D,EAAS/H,KAGrBkS,EAAMvQ,OAAOoR,EAAQ,GACrBF,EAAWpC,KAAKqC,IAAIZ,EAAMzQ,OAAQ0Q,EAAM1Q,QACxCsR,GAAU,OAEX,IAAsB,IAAlBZ,EAAMY,GACb/S,EAAOiP,EAAGjO,WAAW+R,GACC,UAAlB/S,EAAKC,UACL6E,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOkC,gBAEvBmB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAOyI,IAEhBxN,SAASJ,KAAKpF,QAAQmC,OAAOpB,MAAOd,EAAKI,OAElD8R,EAAMvQ,OAAOoR,EAAQ,GAAG,GACxBF,EAAWpC,KAAKqC,IAAIZ,EAAMzQ,OAAQ0Q,EAAM1Q,QACxCuR,GAAU,IAEVlO,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAO8B,YAEvBuB,SACGJ,KAAKpF,QAAQmC,OAAOX,MACpBA,EAAM+I,OAAOyI,IAEhBxN,SACGJ,KAAKpF,QAAQmC,OAAO+B,QACpB8D,EAAS/H,KAGrBkS,EAAMvQ,OAAOoR,EAAQ,GAAG,GACxBF,EAAWpC,KAAKqC,IAAIZ,EAAMzQ,OAAQ0Q,EAAM1Q,QACxCuR,GAAU,QAEX,GAAId,EAAMa,KAAYZ,EAAMY,GAAS,CACxC,GAAIjO,EAAMrD,OAAS,EACf,OAAOqD,EAQX,GALAsN,EAAQhB,EAASc,EAAMa,IACvBL,EAAUjC,KAAKqC,IACXV,EAAM3P,SACNsM,EAAG/N,WAAWS,OAAS2Q,EAAM3Q,QAE7BiR,IAAYN,EAAMtP,SAAU,CAE5B2P,GAAuB,EACvB,IAAK,IAAIF,EAAI,EAAGA,EAAIH,EAAM3Q,OAAQ8Q,GAAK,EAE9B9K,EACGsH,EAAG/N,WAAW0R,EAAUH,GACxBxD,EAAG/N,WAAWoR,EAAMtP,SAAWyP,GAC/B,IACA,GACA,KAGJE,GAAuB,GAG/B,GAAIA,EACA,MAAO,EACH,IAAIxN,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOoB,eAEvBiC,SAAS,cAAe6M,EAAM3Q,QAC9B8D,SACGJ,KAAKpF,QAAQmC,OAAOyB,KACpByO,EAAMtP,UAETyC,SAASJ,KAAKpF,QAAQmC,OAAO2B,GAAI6O,GACjCnN,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,GAGrD,CACJ,OAEJ,OAAOuD,CACX,CAEAqL,cAAcpB,EAAIE,EAAI1N,GAIlB,MAAMuD,EAAQ,GA4Cd,OA1CIiK,EAAG1N,WAAa4N,EAAG5N,UACnByD,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOgB,gBAEvBqC,SAASJ,KAAKpF,QAAQmC,OAAOY,SAAUiM,EAAG1N,UAC1CkE,SAASJ,KAAKpF,QAAQmC,OAAOO,SAAUwM,EAAG5N,UAC1CkE,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,KAK5CwN,EAAGjO,OAASmO,EAAGnO,QAChBiO,EAAGjO,QAAUmO,EAAGnO,OACA,WAAhBiO,EAAG9O,UAEH6E,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOa,aAEvBwC,SAASJ,KAAKpF,QAAQmC,OAAOY,SAAUiM,EAAGjO,OAAS,IACnDyE,SAASJ,KAAKpF,QAAQmC,OAAOO,SAAUwM,EAAGnO,OAAS,IACnDyE,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,IAG7CwN,EAAG3N,UAAY6N,EAAG7N,SAClB0D,EAAMe,MACF,IAAIZ,GACCM,SACGJ,KAAKpF,QAAQmC,OAAOG,OACpB8C,KAAKpF,QAAQmC,OAAOe,eAEvBsC,SAASJ,KAAKpF,QAAQmC,OAAOY,SAAUiM,EAAG3N,SAC1CmE,SAASJ,KAAKpF,QAAQmC,OAAOO,SAAUwM,EAAG7N,SAC1CmE,SAASJ,KAAKpF,QAAQmC,OAAOX,MAAOA,IAI1CuD,CACX,EChtBJ,MAAMmO,EAAkB,CACpB7D,OAAO,EACPM,QAAS,GACTK,UAAU,EACVkB,cAAe,GACf9P,cAAc,EAEd0B,SAAS7C,EAAMkT,EAAcC,EAAe1Q,GACxCzC,EAAKI,KAAOqC,CAEf,EAGDuH,sBAAwB,EACxBO,uBAAyB,EACzBnI,eAAiB,EACjBmC,gBAAkB,EAClB0L,gBAAiB,KACjBmD,UAAU,EACVlR,QAAQ,EACRhC,WACsB,oBAAXmT,SAA0BA,OAAOnT,WAClCmT,OAAOnT,UAId,MAAMoT,EACTpO,YAAYnF,EAAU,IAUlB,GATAoF,KAAKpF,QAAUA,EAGfW,OAAOC,QAAQsS,GAAiBrS,SAAQ,EAAEC,EAAKC,MACtCJ,OAAOiK,UAAU4I,eAAe3I,KAAKzF,KAAKpF,QAASc,KACpDsE,KAAKpF,QAAQc,GAAOC,EACxB,KAGCqE,KAAKpF,QAAQmC,OAAQ,CACtB,MAAMsR,EAAW,CACb,eACA,kBACA,kBACA,oBACA,gBACA,gBACA,aACA,oBACA,iBACA,iBACA,cACA,gBACA,iBACA,gBACA,SACA,QACA,WACA,WACA,UACA,QACA,OACA,KACA,OACA,QACA,OACA,aACA,WACA,aACA,UACA,YAEJrO,KAAKpF,QAAQmC,OAAS,GAClBiD,KAAKpF,QAAQqT,SACbI,EAAS5S,SACL,CAAC6S,EAAS7P,IAAWuB,KAAKpF,QAAQmC,OAAOuR,GAAW7P,IAGxD4P,EAAS5S,SACJ6S,GAAatO,KAAKpF,QAAQmC,OAAOuR,GAAWA,GAGzD,CAEAtO,KAAKyJ,WAAaA,CACtB,CAEA8E,MAAM7R,EAAMiD,GACR,OPuFD,SAAkBjD,EAAMiD,EAAO/E,GAClC,OAAO+E,EAAMmC,OAAOnF,GAASF,EAAUC,EAAMC,EAAM/B,IACvD,COzFe4T,CAAS9R,EAAMiD,EAAOK,KAAKpF,QACtC,CAEA6T,KAAK/R,EAAMiD,GACP,OAAOD,EAAQhD,EAAMiD,EAAOK,KAAKpF,QACrC,CAEA+B,KAAK+M,EAAQC,GAET,OADe,IAAI3J,KAAKyJ,WAAWC,EAAQC,EAAQ3J,KAAKpF,SAC1CyP,MAClB,qqFCpG+EqE,QAA2H,WAAwB,IAAIC,EAAE,IAAIC,EAAE,IAAI1K,EAAE,KAAK2K,EAAE,cAAcpL,EAAE,SAASqL,EAAE,SAASC,EAAE,OAAOC,EAAE,MAAMC,EAAE,OAAOC,EAAE,QAAQC,EAAE,UAAU5S,EAAE,OAAO6S,EAAE,OAAOC,EAAE,eAAeC,EAAE,6FAA6FC,EAAE,sFAAsFC,EAAE,CAACpS,KAAK,KAAKqS,SAAS,2DAA2DlH,MAAM,KAAKmH,OAAO,wFAAwFnH,MAAM,KAAKoH,QAAQ,SAAShB,GAAG,IAAIC,EAAE,CAAC,KAAK,KAAK,KAAK,MAAM1K,EAAEyK,EAAE,IAAI,MAAM,IAAIA,GAAGC,GAAG1K,EAAE,IAAI,KAAK0K,EAAE1K,IAAI0K,EAAE,IAAI,GAAG,GAAGgB,EAAE,SAASjB,EAAEC,EAAE1K,GAAG,IAAI2K,EAAEgB,OAAOlB,GAAG,OAAOE,GAAGA,EAAEvS,QAAQsS,EAAED,EAAE,GAAGvQ,MAAMwQ,EAAE,EAAEC,EAAEvS,QAAQwT,KAAK5L,GAAGyK,CAAE,EAACxK,EAAE,CAAC2K,EAAEc,EAAEG,EAAE,SAASpB,GAAG,IAAIC,GAAGD,EAAEqB,YAAY9L,EAAEoH,KAAKC,IAAIqD,GAAGC,EAAEvD,KAAK2E,MAAM/L,EAAE,IAAIT,EAAES,EAAE,GAAG,OAAO0K,GAAG,EAAE,IAAI,KAAKgB,EAAEf,EAAE,EAAE,KAAK,IAAIe,EAAEnM,EAAE,EAAE,IAAK,EAACmM,EAAE,SAASjB,EAAEC,EAAE1K,GAAG,GAAG0K,EAAEsB,OAAOhM,EAAEgM,OAAO,OAAOvB,EAAEzK,EAAE0K,GAAG,IAAIC,EAAE,IAAI3K,EAAEiM,OAAOvB,EAAEuB,SAASjM,EAAEkM,QAAQxB,EAAEwB,SAAS3M,EAAEmL,EAAEyB,QAAQ/L,IAAIuK,EAAEK,GAAGJ,EAAE5K,EAAET,EAAE,EAAEsL,EAAEH,EAAEyB,QAAQ/L,IAAIuK,GAAGC,GAAG,EAAE,GAAGI,GAAG,UAAUL,GAAG3K,EAAET,IAAIqL,EAAErL,EAAEsL,EAAEA,EAAEtL,KAAK,EAAG,EAACuL,EAAE,SAASL,GAAG,OAAOA,EAAE,EAAErD,KAAKgF,KAAK3B,IAAI,EAAErD,KAAK2E,MAAMtB,EAAG,EAAC4B,EAAE,SAAS5B,GAAG,MAAM,CAACa,EAAEN,EAAEK,EAAEhT,EAAEiU,EAAEvB,EAAEG,EAAEJ,EAAEyB,EAAErB,EAAED,EAAEJ,EAAEa,EAAEd,EAAEA,EAAErL,EAAEiN,GAAG7B,EAAE8B,EAAExB,GAAGR,IAAIkB,OAAOlB,GAAG,IAAIvT,cAAcuF,QAAQ,KAAK,GAAI,EAACoO,EAAE,SAASJ,GAAG,YAAO,IAASA,CAAC,GAAGiC,EAAE,KAAKH,EAAE,CAAA,EAAGA,EAAEG,GAAGpB,EAAE,IAAIe,EAAE,SAAS5B,GAAG,OAAOA,aAAakC,CAAE,EAACC,EAAE,SAASnC,EAAEC,EAAE1K,EAAE2K,GAAG,IAAIpL,EAAE,IAAImL,EAAE,OAAOgC,EAAE,GAAG,iBAAiBhC,EAAE,CAAC,IAAIE,EAAEF,EAAExT,cAAcqV,EAAE3B,KAAKrL,EAAEqL,GAAG5K,IAAIuM,EAAE3B,GAAG5K,EAAET,EAAEqL,GAAG,IAAIC,EAAEH,EAAErG,MAAM,KAAK,IAAI9E,GAAGsL,EAAEzS,OAAO,EAAE,OAAOqS,EAAEI,EAAE,GAAG,KAAK,CAAC,IAAIC,EAAEJ,EAAExR,KAAKqT,EAAEzB,GAAGJ,EAAEnL,EAAEuL,CAAC,CAAC,OAAOH,GAAGpL,IAAImN,EAAEnN,GAAGA,IAAIoL,GAAG+B,CAAE,EAACJ,EAAE,SAAS7B,EAAEC,GAAG,GAAG2B,EAAE5B,GAAG,OAAOA,EAAE0B,QAAQ,IAAInM,EAAE,iBAAiB0K,EAAEA,EAAE,CAAA,EAAG,OAAO1K,EAAEgM,KAAKvB,EAAEzK,EAAE6M,KAAKvE,UAAU,IAAIqE,EAAE3M,EAAG,EAAC8M,EAAE7M,EAAE6M,EAAE3B,EAAEyB,EAAEE,EAAEvN,EAAE8M,EAAES,EAAER,EAAE,SAAS7B,EAAEC,GAAG,OAAO4B,EAAE7B,EAAE,CAACsC,OAAOrC,EAAEsC,GAAGC,IAAIvC,EAAEwC,GAAGC,EAAEzC,EAAE0C,GAAGC,QAAQ3C,EAAE2C,WAAW,IAAIV,EAAE,WAAW,SAASrB,EAAEb,GAAG3O,KAAKkR,GAAGJ,EAAEnC,EAAEsC,OAAO,MAAK,GAAIjR,KAAK6C,MAAM8L,EAAE,CAAC,IAAIiB,EAAEJ,EAAEhK,UAAU,OAAOoK,EAAE/M,MAAM,SAAS8L,GAAG3O,KAAKwR,GAAG,SAAS7C,GAAG,IAAIC,EAAED,EAAEuB,KAAKhM,EAAEyK,EAAEwC,IAAI,GAAG,OAAOvC,EAAE,OAAO,IAAI6C,KAAKC,KAAK,GAAGV,EAAEjC,EAAEH,GAAG,OAAO,IAAI6C,KAAK,GAAG7C,aAAa6C,KAAK,OAAO,IAAIA,KAAK7C,GAAG,GAAG,iBAAiBA,IAAI,MAAM+C,KAAK/C,GAAG,CAAC,IAAIC,EAAED,EAAEpH,MAAM8H,GAAG,GAAGT,EAAE,CAAC,IAAIpL,EAAEoL,EAAE,GAAG,GAAG,EAAEC,GAAGD,EAAE,IAAI,KAAKpG,UAAU,EAAE,GAAG,OAAOvE,EAAE,IAAIuN,KAAKA,KAAKG,IAAI/C,EAAE,GAAGpL,EAAEoL,EAAE,IAAI,EAAEA,EAAE,IAAI,EAAEA,EAAE,IAAI,EAAEA,EAAE,IAAI,EAAEC,IAAI,IAAI2C,KAAK5C,EAAE,GAAGpL,EAAEoL,EAAE,IAAI,EAAEA,EAAE,IAAI,EAAEA,EAAE,IAAI,EAAEA,EAAE,IAAI,EAAEC,EAAE,CAAC,CAAC,OAAO,IAAI2C,KAAK7C,EAAE,CAA3X,CAA6XD,GAAG3O,KAAKsR,GAAG3C,EAAE0C,GAAG,CAAE,EAACrR,KAAKqK,MAAM,EAAEuF,EAAEvF,KAAK,WAAW,IAAIsE,EAAE3O,KAAKwR,GAAGxR,KAAK6R,GAAGlD,EAAEmD,cAAc9R,KAAK+R,GAAGpD,EAAEqD,WAAWhS,KAAKiS,GAAGtD,EAAEuD,UAAUlS,KAAKmS,GAAGxD,EAAEyD,SAASpS,KAAKqS,GAAG1D,EAAE2D,WAAWtS,KAAKuS,GAAG5D,EAAE6D,aAAaxS,KAAKyS,GAAG9D,EAAE+D,aAAa1S,KAAK2S,IAAIhE,EAAEiE,iBAAiB,EAAEhD,EAAEiD,OAAO,WAAW,OAAO7B,CAAC,EAAEpB,EAAEkD,QAAQ,WAAW,QAAQ9S,KAAKwR,GAAGvR,aAAaoP,EAAG,EAACO,EAAEmD,OAAO,SAASpE,EAAEC,GAAG,IAAI1K,EAAEsM,EAAE7B,GAAG,OAAO3O,KAAKgT,QAAQpE,IAAI1K,GAAGA,GAAGlE,KAAKiT,MAAMrE,EAAG,EAACgB,EAAEsD,QAAQ,SAASvE,EAAEC,GAAG,OAAO4B,EAAE7B,GAAG3O,KAAKgT,QAAQpE,EAAG,EAACgB,EAAEuD,SAAS,SAASxE,EAAEC,GAAG,OAAO5O,KAAKiT,MAAMrE,GAAG4B,EAAE7B,EAAG,EAACiB,EAAEwD,GAAG,SAASzE,EAAEC,EAAE1K,GAAG,OAAO8M,EAAEjC,EAAEJ,GAAG3O,KAAK4O,GAAG5O,KAAKqT,IAAInP,EAAEyK,EAAE,EAAEiB,EAAE0D,KAAK,WAAW,OAAOhI,KAAK2E,MAAMjQ,KAAKuT,UAAU,IAAI,EAAE3D,EAAE2D,QAAQ,WAAW,OAAOvT,KAAKwR,GAAGgC,SAAU,EAAC5D,EAAEoD,QAAQ,SAASrE,EAAEC,GAAG,IAAI1K,EAAElE,KAAK6O,IAAImC,EAAEjC,EAAEH,IAAIA,EAAEO,EAAE6B,EAAET,EAAE5B,GAAGU,EAAE,SAASV,EAAEC,GAAG,IAAInL,EAAEuN,EAAER,EAAEtM,EAAEkN,GAAGK,KAAKG,IAAI1N,EAAE2N,GAAGjD,EAAED,GAAG,IAAI8C,KAAKvN,EAAE2N,GAAGjD,EAAED,GAAGzK,GAAG,OAAO2K,EAAEpL,EAAEA,EAAEwP,MAAMjE,EAAG,EAACM,EAAE,SAASX,EAAEC,GAAG,OAAOoC,EAAER,EAAEtM,EAAEuP,SAAS9E,GAAGJ,MAAMrK,EAAEuP,OAAO,MAAM5E,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,MAAMxS,MAAMuS,IAAI1K,EAAG,EAACqL,EAAEvP,KAAKmS,GAAG3C,EAAExP,KAAK+R,GAAGnC,EAAE5P,KAAKiS,GAAG9N,EAAE,OAAOnE,KAAKoR,GAAG,MAAM,IAAI,OAAOjC,GAAG,KAAK5S,EAAE,OAAOsS,EAAEQ,EAAE,EAAE,GAAGA,EAAE,GAAG,IAAI,KAAKH,EAAE,OAAOL,EAAEQ,EAAE,EAAEG,GAAGH,EAAE,EAAEG,EAAE,GAAG,KAAKP,EAAE,IAAI2B,EAAE5Q,KAAK0T,UAAUC,WAAW,EAAElD,GAAGlB,EAAEqB,EAAErB,EAAE,EAAEA,GAAGqB,EAAE,OAAOvB,EAAER,EAAEe,EAAEa,EAAEb,GAAG,EAAEa,GAAGjB,GAAG,KAAKR,EAAE,KAAKI,EAAE,OAAOE,EAAEnL,EAAE,QAAQ,GAAG,KAAK4K,EAAE,OAAOO,EAAEnL,EAAE,UAAU,GAAG,KAAK2K,EAAE,OAAOQ,EAAEnL,EAAE,UAAU,GAAG,KAAKV,EAAE,OAAO6L,EAAEnL,EAAE,eAAe,GAAG,QAAQ,OAAOnE,KAAKqQ,QAAQ,EAAET,EAAEqD,MAAM,SAAStE,GAAG,OAAO3O,KAAKgT,QAAQrE,GAAE,EAAI,EAACiB,EAAEgE,KAAK,SAASjF,EAAEC,GAAG,IAAI1K,EAAE+K,EAAE+B,EAAET,EAAE5B,GAAGQ,EAAE,OAAOnP,KAAKoR,GAAG,MAAM,IAAI/B,GAAGnL,EAAE,GAAGA,EAAE8K,GAAGG,EAAE,OAAOjL,EAAEkL,GAAGD,EAAE,OAAOjL,EAAEgL,GAAGC,EAAE,QAAQjL,EAAE3H,GAAG4S,EAAE,WAAWjL,EAAE6K,GAAGI,EAAE,QAAQjL,EAAE4K,GAAGK,EAAE,UAAUjL,EAAET,GAAG0L,EAAE,UAAUjL,EAAE2K,GAAGM,EAAE,eAAejL,GAAG+K,GAAGK,EAAEL,IAAID,EAAEhP,KAAKiS,IAAIrD,EAAE5O,KAAKmS,IAAIvD,EAAE,GAAGK,IAAIC,GAAGD,IAAI1S,EAAE,CAAC,IAAIgT,EAAEvP,KAAKqQ,QAAQgD,IAAIjE,EAAE,GAAGG,EAAEiC,GAAGnC,GAAGC,GAAGC,EAAElF,OAAOrK,KAAKwR,GAAGjC,EAAE8D,IAAIjE,EAAE9D,KAAKqC,IAAI3N,KAAKiS,GAAG1C,EAAEsE,gBAAgBrC,QAAQnC,GAAGrP,KAAKwR,GAAGnC,GAAGC,GAAG,OAAOtP,KAAKqK,OAAOrK,IAAK,EAAC4P,EAAEyD,IAAI,SAAS1E,EAAEC,GAAG,OAAO5O,KAAKqQ,QAAQuD,KAAKjF,EAAEC,EAAE,EAAEgB,EAAEkE,IAAI,SAASnF,GAAG,OAAO3O,KAAKgR,EAAET,EAAE5B,KAAM,EAACiB,EAAEtL,IAAI,SAASuK,EAAEM,GAAG,IAAIC,EAAEC,EAAErP,KAAK6O,EAAEkF,OAAOlF,GAAG,IAAIS,EAAE0B,EAAET,EAAEpB,GAAGI,EAAE,SAASZ,GAAG,IAAIC,EAAE4B,EAAEnB,GAAG,OAAO2B,EAAER,EAAE5B,EAAEsB,KAAKtB,EAAEsB,OAAO5E,KAAK0I,MAAMrF,EAAEE,IAAIQ,IAAI,GAAGC,IAAIJ,EAAE,OAAOlP,KAAKqT,IAAInE,EAAElP,KAAK+R,GAAGlD,GAAG,GAAGS,IAAI/S,EAAE,OAAOyD,KAAKqT,IAAI9W,EAAEyD,KAAK6R,GAAGhD,GAAG,GAAGS,IAAIN,EAAE,OAAOO,EAAE,GAAG,GAAGD,IAAIL,EAAE,OAAOM,EAAE,GAAG,IAAIC,GAAGJ,EAAE,CAAA,EAAGA,EAAEN,GAAGF,EAAEQ,EAAEL,GAAG7K,EAAEkL,EAAE3L,GAAGkL,EAAES,GAAGE,IAAI,EAAEM,EAAE5P,KAAKwR,GAAGgC,UAAU3E,EAAEW,EAAE,OAAOwB,EAAER,EAAEZ,EAAE5P,KAAM,EAAC4P,EAAEqE,SAAS,SAAStF,EAAEC,GAAG,OAAO5O,KAAKsE,KAAK,EAAEqK,EAAEC,EAAE,EAAEgB,EAAEsE,OAAO,SAASvF,GAAG,IAAIC,EAAE5O,KAAKkE,EAAElE,KAAK0T,UAAU,IAAI1T,KAAK8S,UAAU,OAAO5O,EAAEiQ,aAAa9E,EAAE,IAAIR,EAAEF,GAAG,uBAAuBlL,EAAEuN,EAAEjB,EAAE/P,MAAM8O,EAAE9O,KAAKqS,GAAGtD,EAAE/O,KAAKuS,GAAGvD,EAAEhP,KAAK+R,GAAG9C,EAAE/K,EAAEuL,SAASP,EAAEhL,EAAEwL,OAAOP,EAAE,SAASR,EAAEzK,EAAET,EAAEqL,GAAG,OAAOH,IAAIA,EAAEzK,IAAIyK,EAAEC,EAAEC,KAAKpL,EAAES,GAAG7H,MAAM,EAAEyS,EAAG,EAACvS,EAAE,SAASoS,GAAG,OAAOqC,EAAElC,EAAEA,EAAE,IAAI,GAAGH,EAAE,IAAK,EAACS,EAAElL,EAAEkQ,UAAU,SAASzF,EAAEC,EAAE1K,GAAG,IAAI2K,EAAEF,EAAE,GAAG,KAAK,KAAK,OAAOzK,EAAE2K,EAAEzT,cAAcyT,CAAE,EAACS,EAAE,CAAC+E,GAAGxE,OAAO7P,KAAK6R,IAAIxV,OAAO,GAAGiY,KAAKtU,KAAK6R,GAAGrC,EAAER,EAAE,EAAEuF,GAAGvD,EAAElC,EAAEE,EAAE,EAAE,EAAE,KAAKwF,IAAIrF,EAAEjL,EAAEuQ,YAAYzF,EAAEE,EAAE,GAAGwF,KAAKvF,EAAED,EAAEF,GAAGyB,EAAEzQ,KAAKiS,GAAG0C,GAAG3D,EAAElC,EAAE9O,KAAKiS,GAAG,EAAE,KAAK7C,EAAES,OAAO7P,KAAKmS,IAAIyC,GAAGzF,EAAEjL,EAAE2Q,YAAY7U,KAAKmS,GAAGlD,EAAE,GAAG6F,IAAI3F,EAAEjL,EAAE6Q,cAAc/U,KAAKmS,GAAGlD,EAAE,GAAG+F,KAAK/F,EAAEjP,KAAKmS,IAAI8C,EAAEpF,OAAOf,GAAGoG,GAAGlE,EAAElC,EAAEA,EAAE,EAAE,KAAKK,EAAE5S,EAAE,GAAG4Y,GAAG5Y,EAAE,GAAGyS,EAAEI,EAAEN,EAAEC,GAAE,GAAIqG,EAAEhG,EAAEN,EAAEC,GAAE,GAAIa,EAAEC,OAAOd,GAAGsG,GAAGrE,EAAElC,EAAEC,EAAE,EAAE,KAAKD,EAAEe,OAAO7P,KAAKyS,IAAI6C,GAAGtE,EAAElC,EAAE9O,KAAKyS,GAAG,EAAE,KAAK8C,IAAIvE,EAAElC,EAAE9O,KAAK2S,IAAI,EAAE,KAAK6C,EAAE/R,GAAG,OAAOoL,EAAElO,QAAQ4O,GAAG,SAASZ,EAAEC,GAAG,OAAOA,GAAGU,EAAEX,IAAIlL,EAAE9C,QAAQ,IAAI,GAAG,GAAG,EAAEiP,EAAEI,UAAU,WAAW,OAAO,IAAI1E,KAAK0I,MAAMhU,KAAKwR,GAAGiE,oBAAoB,GAAI,EAAC7F,EAAEjT,KAAK,SAASkS,EAAEO,EAAEC,GAAG,IAAIC,EAAEC,EAAEyB,EAAET,EAAEnB,GAAGI,EAAEgB,EAAE3B,GAAGe,GAAGJ,EAAEQ,YAAYhQ,KAAKgQ,aAAapB,EAAEzK,EAAEnE,KAAKwP,EAAEoB,EAAEI,EAAEpB,EAAE5P,KAAKwP,GAAG,OAAOoB,GAAGtB,EAAE,CAAA,EAAGA,EAAE/S,GAAGqU,EAAE,GAAGtB,EAAEJ,GAAG0B,EAAEtB,EAAEH,GAAGyB,EAAE,EAAEtB,EAAEL,IAAI9K,EAAEyL,GAAG,OAAON,EAAEN,IAAI7K,EAAEyL,GAAG,MAAMN,EAAEP,GAAG5K,EAAED,EAAEoL,EAAER,GAAG3K,EAAEyK,EAAEU,EAAE7L,GAAGU,EAAEwK,EAAEW,GAAGC,IAAIpL,EAAEkL,EAAEuB,EAAEI,EAAEhC,EAAE4B,EAAE,EAAEhB,EAAEiE,YAAY,WAAW,OAAO7T,KAAKiT,MAAM/D,GAAG+C,EAAE,EAAErC,EAAE8D,QAAQ,WAAW,OAAOjD,EAAEzQ,KAAKkR,GAAI,EAACtB,EAAEqB,OAAO,SAAStC,EAAEC,GAAG,IAAID,EAAE,OAAO3O,KAAKkR,GAAG,IAAIhN,EAAElE,KAAKqQ,QAAQxB,EAAEiC,EAAEnC,EAAEC,GAAE,GAAI,OAAOC,IAAI3K,EAAEgN,GAAGrC,GAAG3K,CAAC,EAAE0L,EAAES,MAAM,WAAW,OAAOW,EAAER,EAAExQ,KAAKwR,GAAGxR,KAAK,EAAE4P,EAAE6D,OAAO,WAAW,OAAO,IAAIhC,KAAKzR,KAAKuT,UAAU,EAAE3D,EAAE8F,OAAO,WAAW,OAAO1V,KAAK8S,UAAU9S,KAAK2V,cAAc,IAAI,EAAE/F,EAAE+F,YAAY,WAAW,OAAO3V,KAAKwR,GAAGmE,aAAa,EAAE/F,EAAE3P,SAAS,WAAW,OAAOD,KAAKwR,GAAGoE,aAAc,EAACpG,CAAC,CAAtwI,GAA0wIqG,EAAEhF,EAAErL,UAAU,OAAOgL,EAAEhL,UAAUqQ,EAAE,CAAC,CAAC,MAAMhH,GAAG,CAAC,KAAKpL,GAAG,CAAC,KAAKqL,GAAG,CAAC,KAAKC,GAAG,CAAC,KAAKC,GAAG,CAAC,KAAKE,GAAG,CAAC,KAAK3S,GAAG,CAAC,KAAK6S,IAAI3T,SAAS,SAASkT,GAAGkH,EAAElH,EAAE,IAAI,SAASC,GAAG,OAAO5O,KAAKoT,GAAGxE,EAAED,EAAE,GAAGA,EAAE,IAAK,IAAG6B,EAAEsF,OAAO,SAASnH,EAAEC,GAAG,OAAOD,EAAEoH,KAAKpH,EAAEC,EAAEiC,EAAEL,GAAG7B,EAAEoH,IAAG,GAAIvF,CAAC,EAAEA,EAAES,OAAOH,EAAEN,EAAEwF,QAAQzF,EAAEC,EAAE8C,KAAK,SAAS3E,GAAG,OAAO6B,EAAE,IAAI7B,EAAG,EAAC6B,EAAEyF,GAAGxF,EAAEG,GAAGJ,EAAE0F,GAAGzF,EAAED,EAAED,EAAE,CAAA,EAAGC,CAAC,CAAv7M5B,gECAfF,QAAmK,WAAwB,IAAIE,EAAE,CAACuH,IAAI,YAAYC,GAAG,SAASC,EAAE,aAAaC,GAAG,eAAeC,IAAI,sBAAsBC,KAAK,6BAA6B7H,EAAE,0FAA0FzK,EAAE,OAAO2K,EAAE,QAAQpL,EAAE,qBAAqBwL,EAAE,CAAE,EAACH,EAAE,SAASF,GAAG,OAAOA,GAAGA,IAAIA,EAAE,GAAG,KAAK,MAAUI,EAAE,SAASJ,GAAG,OAAO,SAASD,GAAG3O,KAAK4O,IAAID,EAAG,EAACO,EAAE,CAAC,sBAAsB,SAASN,IAAI5O,KAAKyW,OAAOzW,KAAKyW,KAAK,CAAA,IAAKC,OAAO,SAAS9H,GAAG,IAAIA,EAAE,OAAO,EAAE,GAAG,MAAMA,EAAE,OAAO,EAAE,IAAID,EAAEC,EAAEpH,MAAM,gBAAgBtD,EAAE,GAAGyK,EAAE,KAAKA,EAAE,IAAI,GAAG,OAAO,IAAIzK,EAAE,EAAE,MAAMyK,EAAE,IAAIzK,EAAEA,CAAE,CAAjI,CAAkI0K,EAAE,GAAGO,EAAE,SAASP,GAAG,IAAID,EAAEM,EAAEL,GAAG,OAAOD,IAAIA,EAAE7G,QAAQ6G,EAAEA,EAAEG,EAAE3J,OAAOwJ,EAAEO,GAAI,EAACH,EAAE,SAASH,EAAED,GAAG,IAAIzK,EAAE2K,EAAEI,EAAEmF,SAAS,GAAGvF,GAAG,IAAI,IAAIpL,EAAE,EAAEA,GAAG,GAAGA,GAAG,EAAE,GAAGmL,EAAE9G,QAAQ+G,EAAEpL,EAAE,EAAEkL,KAAK,EAAE,CAACzK,EAAET,EAAE,GAAG,KAAK,OAAOS,EAAE0K,KAAKD,EAAE,KAAK,MAAM,OAAOzK,CAAE,EAACkL,EAAE,CAACgG,EAAE,CAAC3R,EAAE,SAASmL,GAAG5O,KAAK2W,UAAU5H,EAAEH,GAAE,EAAG,GAAGI,EAAE,CAACvL,EAAE,SAASmL,GAAG5O,KAAK2W,UAAU5H,EAAEH,GAAE,EAAG,GAAGkC,EAAE,CAAC,KAAK,SAASlC,GAAG5O,KAAK4W,aAAa,KAAKhI,CAAC,GAAGiI,GAAG,CAAC3S,EAAE,SAAS0K,GAAG5O,KAAK4W,aAAa,IAAIhI,CAAC,GAAG2G,IAAI,CAAC,QAAQ,SAAS3G,GAAG5O,KAAK4W,cAAchI,CAAC,GAAGE,EAAE,CAACD,EAAEG,EAAE,YAAYsG,GAAG,CAACzG,EAAEG,EAAE,YAAYY,EAAE,CAACf,EAAEG,EAAE,YAAYqG,GAAG,CAACxG,EAAEG,EAAE,YAAYiG,EAAE,CAACpG,EAAEG,EAAE,UAAUG,EAAE,CAACN,EAAEG,EAAE,UAAUkG,GAAG,CAACrG,EAAEG,EAAE,UAAUmG,GAAG,CAACtG,EAAEG,EAAE,UAAUyB,EAAE,CAAC5B,EAAEG,EAAE,QAAQ2F,GAAG,CAACzQ,EAAE8K,EAAE,QAAQ8H,GAAG,CAACrT,EAAE,SAASmL,GAAG,IAAID,EAAEM,EAAEU,QAAQzL,EAAE0K,EAAEpH,MAAM,OAAO,GAAGxH,KAAK+W,IAAI7S,EAAE,GAAGyK,EAAE,IAAI,IAAIE,EAAE,EAAEA,GAAG,GAAGA,GAAG,EAAEF,EAAEE,GAAGlO,QAAQ,SAAS,MAAMiO,IAAI5O,KAAK+W,IAAIlI,EAAE,GAAGW,EAAE,CAACX,EAAEG,EAAE,UAAUuF,GAAG,CAACrQ,EAAE8K,EAAE,UAAUwF,IAAI,CAAC/Q,EAAE,SAASmL,GAAG,IAAID,EAAEQ,EAAE,UAAUjL,GAAGiL,EAAE,gBAAgBR,EAAErQ,KAAK,SAASsQ,GAAG,OAAOA,EAAEvS,MAAM,EAAE,EAAG,KAAIyL,QAAQ8G,GAAG,EAAE,GAAG1K,EAAE,EAAE,MAAM,IAAIsG,MAAMxK,KAAKoQ,MAAMlM,EAAE,IAAIA,CAAC,GAAGwQ,KAAK,CAACjR,EAAE,SAASmL,GAAG,IAAID,EAAEQ,EAAE,UAAUrH,QAAQ8G,GAAG,EAAE,GAAGD,EAAE,EAAE,MAAM,IAAInE,MAAMxK,KAAKoQ,MAAMzB,EAAE,IAAIA,CAAC,GAAGqI,EAAE,CAAC,WAAWhI,EAAE,SAASqF,GAAG,CAACnQ,EAAE,SAAS0K,GAAG5O,KAAKmQ,KAAKrB,EAAEF,EAAE,GAAG0F,KAAK,CAAC,QAAQtF,EAAE,SAASwG,EAAEtG,EAAE+H,GAAG/H,GAAG,SAAS3S,EAAE2H,GAAG,IAAI2K,EAAEpL,EAAEoL,EAAE3K,EAAET,EAAEwL,GAAGA,EAAEiI,QAAQ,IAAI,IAAIpI,GAAG5K,EAAE2K,EAAElO,QAAQ,qCAAqC,SAASgO,EAAEzK,EAAE2K,GAAG,IAAII,EAAEJ,GAAGA,EAAEpH,cAAc,OAAOvD,GAAGT,EAAEoL,IAAID,EAAEC,IAAIpL,EAAEwL,GAAGtO,QAAQ,kCAAkC,SAASiO,EAAED,EAAEzK,GAAG,OAAOyK,GAAGzK,EAAE7H,MAAM,EAAE,GAAI,KAAImL,MAAMmH,GAAGK,EAAEF,EAAExS,OAAO4S,EAAE,EAAEA,EAAEF,EAAEE,GAAG,EAAE,CAAC,IAAIC,EAAEL,EAAEI,GAAGH,EAAEK,EAAED,GAAG5S,EAAEwS,GAAGA,EAAE,GAAGM,EAAEN,GAAGA,EAAE,GAAGD,EAAEI,GAAGG,EAAE,CAAC8H,MAAM5a,EAAE6a,OAAO/H,GAAGF,EAAExO,QAAQ,WAAW,GAAG,CAAC,OAAO,SAASiO,GAAG,IAAI,IAAID,EAAE,GAAGzK,EAAE,EAAE2K,EAAE,EAAE3K,EAAE8K,EAAE9K,GAAG,EAAE,CAAC,IAAIT,EAAEqL,EAAE5K,GAAG,GAAG,iBAAiBT,EAAEoL,GAAGpL,EAAEnH,WAAW,CAAC,IAAI2S,EAAExL,EAAE0T,MAAMjI,EAAEzL,EAAE2T,OAAOjI,EAAEP,EAAEvS,MAAMwS,GAAGE,EAAEE,EAAE9G,KAAKgH,GAAG,GAAGD,EAAEzJ,KAAKkJ,EAAEI,GAAGH,EAAEA,EAAEjO,QAAQoO,EAAE,GAAG,CAAC,CAAC,OAAO,SAASH,GAAG,IAAID,EAAEC,EAAE+H,UAAU,QAAG,IAAShI,EAAE,CAAC,IAAIzK,EAAE0K,EAAEyI,MAAM1I,EAAEzK,EAAE,KAAK0K,EAAEyI,OAAO,IAAI,KAAKnT,IAAI0K,EAAEyI,MAAM,UAAUzI,EAAE+H,SAAS,CAAC,CAAxH,CAA0HhI,GAAGA,EAAE,CAAC,OAAO,SAASC,EAAED,EAAEzK,GAAGA,EAAEqM,EAAE+G,mBAAkB,EAAG1I,GAAGA,EAAE2I,oBAAoBzI,EAAEF,EAAE2I,mBAAmB,IAAI1I,EAAEF,EAAEnJ,UAAU/B,EAAEoL,EAAEhM,MAAMgM,EAAEhM,MAAM,SAAS+L,GAAG,IAAID,EAAEC,EAAEsB,KAAKrB,EAAED,EAAEuC,IAAIrC,EAAEF,EAAEmC,KAAK/Q,KAAKoR,GAAGvC,EAAE,IAAIG,EAAEF,EAAE,GAAG,GAAG,iBAAiBE,EAAE,CAAC,IAAIE,GAAE,IAAKJ,EAAE,GAAGK,GAAE,IAAKL,EAAE,GAAGC,EAAEG,GAAGC,EAAEC,EAAEN,EAAE,GAAGK,IAAIC,EAAEN,EAAE,IAAIG,EAAEjP,KAAK0T,WAAWxE,GAAGE,IAAIH,EAAE/K,EAAEgS,GAAG9G,IAAIpP,KAAKwR,GAAG,SAAS5C,EAAED,EAAEzK,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK4D,QAAQ6G,IAAI,EAAE,OAAO,IAAI8C,MAAM,MAAM9C,EAAE,IAAI,GAAGC,GAAG,IAAIC,EAAEtS,EAAEoS,EAAFpS,CAAKqS,GAAGnL,EAAEoL,EAAEsB,KAAKlB,EAAEJ,EAAEuB,MAAMtB,EAAED,EAAEkI,IAAI/H,EAAEH,EAAEwI,MAAMnI,EAAEL,EAAE2I,QAAQrI,EAAEN,EAAE4I,QAAQ1I,EAAEF,EAAE+H,aAAaxH,EAAEP,EAAE4H,KAAKpH,EAAE,IAAIoC,KAAK7B,EAAEd,IAAIrL,GAAGwL,EAAE,EAAEI,EAAE6C,WAAW1C,EAAE/L,GAAG4L,EAAEyC,cAAckF,EAAE,EAAEvT,IAAIwL,IAAI+H,EAAE/H,EAAE,EAAEA,EAAE,EAAEI,EAAE2C,YAAY,IAAIzB,EAAEvB,GAAG,EAAE7K,EAAE+K,GAAG,EAAEuB,EAAEtB,GAAG,EAAEyB,EAAE7B,GAAG,EAAE,OAAOK,EAAE,IAAIqC,KAAKA,KAAKG,IAAIpC,EAAEwH,EAAEpH,EAAEW,EAAEpM,EAAEsM,EAAEG,EAAE,GAAGxB,EAAEsH,OAAO,MAAMxS,EAAE,IAAIuN,KAAKA,KAAKG,IAAIpC,EAAEwH,EAAEpH,EAAEW,EAAEpM,EAAEsM,EAAEG,IAAI,IAAIa,KAAKjC,EAAEwH,EAAEpH,EAAEW,EAAEpM,EAAEsM,EAAEG,EAA+B,CAA5B,MAAMhC,GAAG,OAAO,IAAI6C,KAAK,GAAG,CAAE,CAA1c,CAA2c9C,EAAEK,EAAEH,GAAG7O,KAAKqK,OAAO+E,IAAG,IAAKA,IAAIpP,KAAKkR,GAAGlR,KAAKiR,OAAO7B,GAAG8B,IAAInC,GAAGJ,GAAG3O,KAAKkU,OAAOlF,KAAKhP,KAAKwR,GAAG,IAAIC,KAAK,KAAKxC,EAAE,CAAA,CAAG,MAAK,GAAGD,aAAa5Q,MAAM,IAAI,IAAIiR,EAAEL,EAAE1S,OAAOsT,EAAE,EAAEA,GAAGP,EAAEO,GAAG,EAAE,CAACd,EAAE,GAAGE,EAAEY,EAAE,GAAG,IAAIJ,EAAEtL,EAAEqK,MAAMvO,KAAK8O,GAAG,GAAGU,EAAEsD,UAAU,CAAC9S,KAAKwR,GAAGhC,EAAEgC,GAAGxR,KAAKkR,GAAG1B,EAAE0B,GAAGlR,KAAKqK,OAAO,KAAK,CAACuF,IAAIP,IAAIrP,KAAKwR,GAAG,IAAIC,KAAK,IAAK,MAAKhO,EAAEgC,KAAKzF,KAAK4O,IAAI,CAA3kHD"}