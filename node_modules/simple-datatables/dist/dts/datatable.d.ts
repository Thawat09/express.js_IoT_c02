import { Rows } from "./rows";
import { Columns } from "./columns";
import { columnSettingsType, DataTableOptions, nodeType, renderOptions, TableDataType } from "./interfaces";
export declare class DataTable {
    columnSettings: {
        sort: false | {
            column: number;
            dir: "asc" | "desc";
        };
        columns: (columnSettingsType | undefined)[];
    };
    columnWidths: number[];
    columns: Columns;
    container: HTMLDivElement;
    currentPage: number;
    data: TableDataType;
    dd: any;
    dom: HTMLTableElement;
    events: any;
    filterStates: any;
    hasHeadings: boolean;
    hasRows: boolean;
    headerDOM: HTMLDivElement;
    id: string;
    initialInnerHTML: string;
    initialized: boolean;
    input: HTMLInputElement;
    label: HTMLElement;
    lastPage: any;
    links: any;
    listeners: any;
    onFirstPage: boolean;
    onLastPage: boolean;
    options: DataTableOptions;
    pagers: HTMLUListElement[];
    pages: any;
    rect: any;
    rows: Rows;
    searchData: number[];
    searching: boolean;
    totalPages: number;
    virtualDOM: nodeType;
    virtualHeaderDOM: nodeType;
    wrapper: HTMLElement;
    constructor(table: HTMLTableElement | string, options?: DataTableOptions);
    /**
     * Initialize the instance
     */
    init(): boolean;
    /**
     * Render the instance
     */
    render(): void;
    renderTable(renderOptions?: renderOptions): void;
    /**
     * Render the page
     * @return {Void}
     */
    renderPage(renderTable?: boolean, lastRowCursor?: boolean): void;
    /**
     * Render the pager(s)
     * @return {Void}
     */
    renderPager(): void;
    /**
     * Bind event listeners
     * @return {[type]} [description]
     */
    bindEvents(): void;
    /**
     * execute on resize
     */
    onResize(): void;
    /**
     * Destroy the instance
     * @return {void}
     */
    destroy(): void;
    /**
     * Update the instance
     * @return {Void}
     */
    update(renderTable?: boolean): void;
    paginate(): number;
    /**
     * Fix column widths
     */
    fixColumns(): void;
    /**
     * Fix the container height
     */
    fixHeight(): void;
    /**
     * Perform a search of the data set
     */
    search(query: any): boolean;
    /**
     * Change page
     */
    page(page: number, lastRowCursor?: boolean): boolean;
    /**
     * Add new row data
     */
    insert(data: any): void;
    /**
     * Refresh the instance
     */
    refresh(): void;
    /**
     * Print the table
     */
    print(): void;
    /**
     * Show a message in the table
     */
    setMessage(message: any): void;
    /**
     * Add custom event listener
     */
    on(event: any, callback: any): void;
    /**
     * Remove custom event listener
     */
    off(event: any, callback: any): void;
    /**
     * Fire custom event
     */
    emit(event: any, ...args: any[]): void;
}
